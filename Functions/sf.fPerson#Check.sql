SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [sf].[fPerson#Check]
	(
	 @PersonSID              int
	,@GenderSID              int
	,@NamePrefixSID          int
	,@FirstName              nvarchar(30)
	,@CommonName             nvarchar(30)
	,@MiddleNames            nvarchar(30)
	,@LastName               nvarchar(35)
	,@BirthDate              date
	,@DeathDate              date
	,@HomePhone              varchar(25)
	,@MobilePhone            varchar(25)
	,@IsTextMessagingEnabled bit
	,@ImportBatch            nvarchar(100)
	,@PersonXID              varchar(150)
	,@LegacyKey              nvarchar(50)
	,@IsDeleted              bit
	,@CreateUser             nvarchar(75)
	,@CreateTime             datetimeoffset(7)
	,@UpdateUser             nvarchar(75)
	,@UpdateTime             datetimeoffset(7)
	,@RowGUID                uniqueidentifier
	)
returns bit
as
/*********************************************************************************************************************************
ScalarF : sf.fPerson#Check
Notice  : Copyright Â© 2019 Softworks Group Inc.
Summary : returns 1 (bit) when record values comply with business rules
-----------------------------------------------------------------------------------------------------------------------------------
Author  : Generated by DB Studio: pCheckFcnGen | Designer: Tim Edlund
Version : March 2019
-----------------------------------------------------------------------------------------------------------------------------------
Comments
--------

The function is designed to be incorporated into a check constraint on the table.  The standard for enforcing business rules,
except those that apply only on DELETE, is to use a check constraint.  A single check constraint is implemented on each table.
The constraint checks business rules by calling this function which is passed all the columns of the table. The shell of this
function was generated by an SGI studio procedure.  The function requires customization by a developer to implement validation
logic unique to this table.  Some rules may have been "auto-generated" based on column naming conventions.

The function is designed to be called through a check constraint or through a select statement for batch checking records.  In
both cases all columns of the table (not entity view) must be passed to the function.

In order to support re-generation of functions from DB Studio, the logic for each rule must be implemented with comment based
"XML tagging".  The <BusinessRules> and </BusinessRules> tag pair must enclose the content of all rules and then each individual
rule must be enclosed in a <Rule> ... </Rule> tag pair. The rule name and author information is parsed by the generator inserted
into the business rule index for reference in the documentation header (below).

The function contains "base" rules and "optional rules". A function of the same name in the "ext" schema may contain rules that
apply to this client configuration only. All base rules in the function are enforced on 100% of client configurations while optional
rules can be turned off by setting the "IsEnforced" bit = 0 for the rule in the sf.BusinessRule configuration table through the UI.
Base rules do not check the status of the IsEnforced bit. The enforcement of optional rules must be ON by default. See template.

To Add New Business Rules
-------------------------
o Copy the template (at bottom) to create new rule.
o Include the name of the first column involved in the rule as last segment in @errorMessageSCD
o If rule is optional, call sf.fBusinessRuleIsEnforced with same @errorMessageSCD (include the ".ColumnName")
o Update "Author" value on copied from template to your name - otherwise rule will be overwritten on regeneration!
o Do not change "$AutoRules" syntax - otherwise updates to auto-rules are not generated.
o Remove call to sf.fBusinessRuleIsEnforced from copied template if rule is MANDATORY.
o Prefix MessageSCD with "MBR." if rule is MANDATORY (only).
o Nest IF block to avoid testing rules that do not apply based on preconditions (to improve performance).
o Ensure test of all rules are defined in the test harness project.
o Check performance and resolve as required.

Rule Added By                  MessageCode.Column & Text
------------------------------ ----------------------------------------------------------------------------------------------------
$AutoRules | Tim Edlund        MBR.AssignmentToInactiveParent.GenderSID The %1 is marked inactive. Assign an active %1.
$AutoRules | Tim Edlund        MBR.AssignmentToInactiveParent.NamePrefixSID The %1 is marked inactive. Assign an active %1.
$AutoRules | Tim Edlund        ValueIsRequired.BirthDate A value for "%1" is required.
$AutoRules | Tim Edlund        ValueIsRequired.CommonName A value for "%1" is required.
$AutoRules | Tim Edlund        ValueIsRequired.DeathDate A value for "%1" is required.
$AutoRules | Tim Edlund        ValueIsRequired.HomePhone A value for "%1" is required.
$AutoRules | Tim Edlund        ValueIsRequired.ImportBatch A value for "%1" is required.
$AutoRules | Tim Edlund        ValueIsRequired.MiddleNames A value for "%1" is required.
$AutoRules | Tim Edlund        ValueIsRequired.MobilePhone A value for "%1" is required.
$AutoRules | Tim Edlund        ValueIsRequired.NamePrefixSID A value for "%1" is required.
Oct 2015 | Kevin Lau           MBR.NoFutureDating.BirthDate (see source for message text)
Robin Payne | July 2017        MinimumAge.BirthDate (see source for message text)
Robin Payne | July 2017        MBR.BirthDateMustBeBeforeDeathDate.BirthDate (see source for message text)
Robin Payne | Feb 2018         EitherValueIsRequired.HomePhone (see source for message text)

Example
-------

select
	 PersonSID
	,FirstName
	,CommonName
	,MiddleNames
	,LastName
	,sf.fPerson#Check
		(
		 PersonSID
		,GenderSID
		,NamePrefixSID
		,FirstName
		,CommonName
		,MiddleNames
		,LastName
		,BirthDate
		,DeathDate
		,HomePhone
		,MobilePhone
		,IsTextMessagingEnabled
		,SignatureImage
		,IdentityPhoto
		,ImportBatch
		,UserDefinedColumns
		,PersonXID
		,LegacyKey
		,IsDeleted
		,CreateUser
		,CreateTime
		,UpdateUser
		,UpdateTime
		,RowGUID
		)                             IsValid
from
	sf.Person

-------------------------------------------------------------------------------------------------------------------------------- */

begin

	declare
		 @errorText                       nvarchar(4000)  = N'1'							-- text for errors or returns TRUE when valid
		,@checkFcn                        nvarchar(128)   = object_name(@@procid)												-- name of currently executing function
		,@columnNames                     nvarchar(500)												-- column(s) with error - if multiple separate with commas
		,@errorMessageSCD                 varchar(75)													-- message code to lookup on error
		,@defaultMessageText              nvarchar(1000)											-- message text to return if no override in sf.Message
		,@arg1                            nvarchar(1000)											-- replacement text for "%1" in the message text
		,@arg2                            nvarchar(1000)											-- replacement text for "%2" in the message text
		,@arg3                            nvarchar(1000)											-- replacement text for "%3" in the message text
		,@arg4                            nvarchar(1000)											-- replacement text for "%4" in the message text
		,@arg5                            nvarchar(1000)											-- replacement text for "%5" in the message text
		,@recentAccessHours               smallint														-- configuration value for "recent" insert threshold
		,@isInsert                        bit             = 0									-- 1 if record appears to be an insert (see logic below)
		,@isUpdate                        bit             = 0									-- 1 if not a "new" record
		,@isRecentInsert                  bit             = 0									-- 1 if record was inserted within RECENT hours
		,@ON                              bit             = cast(1 as bit)		-- a constant to reduce repetitive cast syntax in bit comparisons
		,@OFF                             bit             = cast(0 as bit)		-- a constant to reduce repetitive cast syntax in bit comparisons

	-- get configuration value or default to 24 hours

	set @recentAccessHours = isnull(convert(smallint, sf.fConfigParam#Value('RecentAccessHours')), 24)

	if datediff(hour, @CreateTime, sysdatetimeoffset()) > @recentAccessHours-- older than "recent" hours - update only
	begin
		set @isUpdate = @ON
	end
	else if datediff(second, @CreateTime, sysdatetimeoffset()) <= 2					-- record is only 2 seconds old - assume INSERT
	begin
		set @isInsert       = @ON
		set @isRecentInsert = @ON
	end
	else																																		-- record inserted within configured "recent" hours
	begin
		set @isUpdate       = @ON
		set @isRecentInsert = @ON
	end
	
	--!<BusinessRules>
	
	--!<Rule Author="$AutoRules | Tim Edlund">
	if @isInsert = @ON																											-- applies when inserting
	begin
		if (select x.IsActive from sf.Gender x where x.GenderSID = @GenderSID) = @OFF										-- and parent row is inactive
		begin
			set @errorMessageSCD    = 'MBR.AssignmentToInactiveParent.GenderSID'
			set @columnNames        = N'GenderSID'
			set @defaultMessageText = N'The %1 is marked inactive. Assign an active %1.'
			set @arg1               = N'gender'
		end
	end
	--!</Rule>
	
	--!<Rule Author="$AutoRules | Tim Edlund">
	if @isInsert = @ON																											-- applies when inserting
	begin
		if (select x.IsActive from sf.NamePrefix x where x.NamePrefixSID = @NamePrefixSID) = @OFF				-- and parent row is inactive
		begin
			set @errorMessageSCD    = 'MBR.AssignmentToInactiveParent.NamePrefixSID'
			set @columnNames        = N'NamePrefixSID'
			set @defaultMessageText = N'The %1 is marked inactive. Assign an active %1.'
			set @arg1               = N'name prefix'
		end
	end
	--!</Rule>
	
	--!<Rule Author="$AutoRules | Tim Edlund">
	if @errorMessageSCD is null and sf.fBusinessRuleIsEnforced(N'sf',N'Person','ValueIsRequired.BirthDate') = @ON and @BirthDate is null
	begin
		set @errorMessageSCD    = 'ValueIsRequired.BirthDate'
		set @columnNames        = N'BirthDate'
		set @defaultMessageText = N'A value for "%1" is required.'
		set @arg1               = N'Birth Date'
	end
	--!</Rule>
	
	--!<Rule Author="$AutoRules | Tim Edlund">
	if @errorMessageSCD is null and sf.fBusinessRuleIsEnforced(N'sf',N'Person','ValueIsRequired.CommonName') = @ON and @CommonName is null
	begin
		set @errorMessageSCD    = 'ValueIsRequired.CommonName'
		set @columnNames        = N'CommonName'
		set @defaultMessageText = N'A value for "%1" is required.'
		set @arg1               = N'Common Name'
	end
	--!</Rule>
	
	--!<Rule Author="$AutoRules | Tim Edlund">
	if @errorMessageSCD is null and sf.fBusinessRuleIsEnforced(N'sf',N'Person','ValueIsRequired.DeathDate') = @ON and @DeathDate is null
	begin
		set @errorMessageSCD    = 'ValueIsRequired.DeathDate'
		set @columnNames        = N'DeathDate'
		set @defaultMessageText = N'A value for "%1" is required.'
		set @arg1               = N'Death Date'
	end
	--!</Rule>
	
	--!<Rule Author="$AutoRules | Tim Edlund">
	if @errorMessageSCD is null and sf.fBusinessRuleIsEnforced(N'sf',N'Person','ValueIsRequired.HomePhone') = @ON and @HomePhone is null
	begin
		set @errorMessageSCD    = 'ValueIsRequired.HomePhone'
		set @columnNames        = N'HomePhone'
		set @defaultMessageText = N'A value for "%1" is required.'
		set @arg1               = N'Home Phone'
	end
	--!</Rule>
	
	--!<Rule Author="$AutoRules | Tim Edlund">
	if @errorMessageSCD is null and sf.fBusinessRuleIsEnforced(N'sf',N'Person','ValueIsRequired.ImportBatch') = @ON and @ImportBatch is null
	begin
		set @errorMessageSCD    = 'ValueIsRequired.ImportBatch'
		set @columnNames        = N'ImportBatch'
		set @defaultMessageText = N'A value for "%1" is required.'
		set @arg1               = N'Import Batch'
	end
	--!</Rule>
	
	--!<Rule Author="$AutoRules | Tim Edlund">
	if @errorMessageSCD is null and sf.fBusinessRuleIsEnforced(N'sf',N'Person','ValueIsRequired.MiddleNames') = @ON and @MiddleNames is null
	begin
		set @errorMessageSCD    = 'ValueIsRequired.MiddleNames'
		set @columnNames        = N'MiddleNames'
		set @defaultMessageText = N'A value for "%1" is required.'
		set @arg1               = N'Middle Names'
	end
	--!</Rule>
	
	--!<Rule Author="$AutoRules | Tim Edlund">
	if @errorMessageSCD is null and sf.fBusinessRuleIsEnforced(N'sf',N'Person','ValueIsRequired.MobilePhone') = @ON and @MobilePhone is null
	begin
		set @errorMessageSCD    = 'ValueIsRequired.MobilePhone'
		set @columnNames        = N'MobilePhone'
		set @defaultMessageText = N'A value for "%1" is required.'
		set @arg1               = N'Mobile Phone'
	end
	--!</Rule>
	
	--!<Rule Author="$AutoRules | Tim Edlund">
	if @errorMessageSCD is null and sf.fBusinessRuleIsEnforced(N'sf',N'Person','ValueIsRequired.NamePrefixSID') = @ON and @NamePrefixSID is null
	begin
		set @errorMessageSCD    = 'ValueIsRequired.NamePrefixSID'
		set @columnNames        = N'NamePrefixSID'
		set @defaultMessageText = N'A value for "%1" is required.'
		set @arg1               = N'Name Prefix'
	end
	--!</Rule>
	
	--!<Rule Author="Oct 2015 | Kevin Lau" Updates="None">
	if @errorMessageSCD is null and @BirthDate > sf.fToday()
	begin
		set @errorMessageSCD    = 'MBR.NoFutureDating.BirthDate'
		set @columnNames        = N'BirthDate'
		set @defaultMessageText = N'The "%1" cannot be in the future.'
		set @arg1               = N'date of birth'
	end
	--!</Rule>
	
	--!<Rule Author="Robin Payne | July 2017" Updates="None">
	if @errorMessageSCD is null and sf.fBusinessRuleIsEnforced(N'sf',N'Person','MinimumAge.BirthDate') = @ON
		and sf.fAgeInYears(@BirthDate, sf.fToday()) < isnull(sf.fConfigParam#Value( 'MinimumAge' ), '0')
	begin
		set @errorMessageSCD      = 'MinimumAge.BirthDate'
		set @columnNames          = N'Birthdate'
		set @defaultMessageText   = N'People entered into this system must be at least %1 years old. Is the birth date correct?'
		set @arg1									= isnull(sf.fConfigParam#Value( 'MinimumAge' ), '0')
	end
	--!</Rule>
	
	--!<Rule Author="Robin Payne | July 2017" Updates="None">
	if @errorMessageSCD is null and @DeathDate is not null and @BirthDate is not null and @BirthDate > @DeathDate
	begin
		set @errorMessageSCD      = 'MBR.BirthDateMustBeBeforeDeathDate.BirthDate'
		set @columnNames          = N'BirthDate, DeathDate'
		set @defaultMessageText   = N'"%1" cannot be before "%2"'
		set @arg1                 = N'Date of Birth'
		set @arg2									= N'Date Of Death'
	end
	--!</Rule>
	
	--!<Rule Author="Robin Payne | Feb 2018" Updates="None">
	if @errorMessageSCD is null and sf.fBusinessRuleIsEnforced(N'sf',N'Person','EitherValueIsRequired.HomePhone') = @ON and @MobilePhone is null and @HomePhone is null
	begin
		set @errorMessageSCD		=	'EitherValueIsRequired.HomePhone'
		set @columnNames				=	N'HomePhone, MobilePhone'
		set @defaultMessageText	=	N'A value is required for either %1 or %2.'
		set @arg1								= N'Home Phone'
		set @arg2								=	N'Mobile Phone'
	end
	--!</Rule>
	
	--!<Rule Author="?Template | Mar 2019" Updates="None">
	if @errorMessageSCD is null --and sf.fBusinessRuleIsEnforced(N'sf',N'Person','?SomeMessageCode.ColumnName') = 1	-- check if rule is ON - REMOVE for mandatory rules
	and 1 = 0
	begin
		set @errorMessageSCD      = '?SomeMessageCode.ColumnName'
		set @columnNames          = N'?ColumnName1, ?ColumnName2'
		set @defaultMessageText   = N'?Some default message text ...'
		set @arg1                 = N'?SomeReplacementValue'
	end
	--!</Rule>
	
	--!</BusinessRules>
	
	if @errorMessageSCD is not null
	begin
	
		set @errorText = sf.fCheckConstraintErrorString
			(
			 @errorMessageSCD
			,@defaultMessageText
			,@columnNames
			,@PersonSID
			,@arg1
			,@arg2
			,@arg3
			,@arg4
			,@arg5
			)
	
	end
	
	-- cast returns TRUE if no errors (@errorText=1) but throws an exception for processing by sf.pErrorRethrow otherwise
	
	return cast(@errorText as bit)
end
GO
