SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [sf].[fApplicationUser#Check]
	(
	 @ApplicationUserSID               int
	,@PersonSID                        int
	,@CultureSID                       int
	,@AuthenticationAuthoritySID       int
	,@UserName                         nvarchar(75)
	,@LastReviewTime                   datetimeoffset(7)
	,@LastReviewUser                   nvarchar(75)
	,@IsPotentialDuplicate             bit
	,@IsTemplate                       bit
	,@GlassBreakPassword               varbinary(8000)
	,@LastGlassBreakPasswordChangeTime datetimeoffset(7)
	,@IsActive                         bit
	,@AuthenticationSystemID           nvarchar(50)
	,@ApplicationUserXID               varchar(150)
	,@LegacyKey                        nvarchar(50)
	,@IsDeleted                        bit
	,@CreateUser                       nvarchar(75)
	,@CreateTime                       datetimeoffset(7)
	,@UpdateUser                       nvarchar(75)
	,@UpdateTime                       datetimeoffset(7)
	,@RowGUID                          uniqueidentifier
	)
returns bit
as
/*********************************************************************************************************************************
ScalarF : sf.fApplicationUser#Check
Notice  : Copyright Â© 2019 Softworks Group Inc.
Summary : returns 1 (bit) when record values comply with business rules
-----------------------------------------------------------------------------------------------------------------------------------
Author  : Generated by DB Studio: pCheckFcnGen | Designer: Tim Edlund
Version : April 2019
-----------------------------------------------------------------------------------------------------------------------------------
Comments
--------

The function is designed to be incorporated into a check constraint on the table.  The standard for enforcing business rules,
except those that apply only on DELETE, is to use a check constraint.  A single check constraint is implemented on each table.
The constraint checks business rules by calling this function which is passed all the columns of the table. The shell of this
function was generated by an SGI studio procedure.  The function requires customization by a developer to implement validation
logic unique to this table.  Some rules may have been "auto-generated" based on column naming conventions.

The function is designed to be called through a check constraint or through a select statement for batch checking records.  In
both cases all columns of the table (not entity view) must be passed to the function.

In order to support re-generation of functions from DB Studio, the logic for each rule must be implemented with comment based
"XML tagging".  The <BusinessRules> and </BusinessRules> tag pair must enclose the content of all rules and then each individual
rule must be enclosed in a <Rule> ... </Rule> tag pair. The rule name and author information is parsed by the generator inserted
into the business rule index for reference in the documentation header (below).

The function contains "base" rules and "optional rules". A function of the same name in the "ext" schema may contain rules that
apply to this client configuration only. All base rules in the function are enforced on 100% of client configurations while optional
rules can be turned off by setting the "IsEnforced" bit = 0 for the rule in the sf.BusinessRule configuration table through the UI.
Base rules do not check the status of the IsEnforced bit. The enforcement of optional rules must be ON by default. See template.

To Add New Business Rules
-------------------------
o Copy the template (at bottom) to create new rule.
o Include the name of the first column involved in the rule as last segment in @errorMessageSCD
o If rule is optional, call sf.fBusinessRuleIsEnforced with same @errorMessageSCD (include the ".ColumnName")
o Update "Author" value on copied from template to your name - otherwise rule will be overwritten on regeneration!
o Do not change "$AutoRules" syntax - otherwise updates to auto-rules are not generated.
o Remove call to sf.fBusinessRuleIsEnforced from copied template if rule is MANDATORY.
o Prefix MessageSCD with "MBR." if rule is MANDATORY (only).
o Nest IF block to avoid testing rules that do not apply based on preconditions (to improve performance).
o Ensure test of all rules are defined in the test harness project.
o Check performance and resolve as required.

Rule Added By                  MessageCode.Column & Text
------------------------------ ----------------------------------------------------------------------------------------------------
$AutoRules | Tim Edlund        MBR.AssignmentToInactiveParent.AuthenticationAuthoritySID The %1 is marked inactive. Assign an activ
$AutoRules | Tim Edlund        MBR.AssignmentToInactiveParent.CultureSID The %1 is marked inactive. Assign an active %1.
$AutoRules | Tim Edlund        ValueIsRequired.GlassBreakPassword A value for "%1" is required.
$AutoRules | Tim Edlund        ValueIsRequired.LastGlassBreakPasswordChangeTime A value for "%1" is required.
Tim Edlund | Nov 2012          MBR.UserNameFormat.UserName (see source for message text)
Tim Edlund | Mar 2012          MBR.BothOrNeither.LastReviewTime (see source for message text)
Tim Edlund | Nov 2012          MBR.NoFutureDating.LastReviewTime' @columnNames = LastReviewTime (see source for message text)
Tim Edlund | Dec 2012          MBR.LastSysAdmin.IsActive (see source for message text)
Cory Ng | Sep 2014             MBR.IsOwner.IsActive (see source for message text)
Tim Edlund | Sep 2015          PasswordRequiredInTS (see source for message text)

Example
-------

select
	 ApplicationUserSID
	,UserName
	,LastReviewUser
	,sf.fApplicationUser#Check
		(
		 ApplicationUserSID
		,PersonSID
		,CultureSID
		,AuthenticationAuthoritySID
		,UserName
		,LastReviewTime
		,LastReviewUser
		,IsPotentialDuplicate
		,IsTemplate
		,GlassBreakPassword
		,LastGlassBreakPasswordChangeTime
		,Comments
		,IsActive
		,AuthenticationSystemID
		,ChangeAudit
		,UserDefinedColumns
		,ApplicationUserXID
		,LegacyKey
		,IsDeleted
		,CreateUser
		,CreateTime
		,UpdateUser
		,UpdateTime
		,RowGUID
		)                             IsValid
from
	sf.ApplicationUser

-------------------------------------------------------------------------------------------------------------------------------- */

begin

	declare
		 @errorText                       nvarchar(4000)  = N'1'							-- text for errors or returns TRUE when valid
		,@checkFcn                        nvarchar(128)   = object_name(@@procid)												-- name of currently executing function
		,@columnNames                     nvarchar(500)												-- column(s) with error - if multiple separate with commas
		,@errorMessageSCD                 varchar(75)													-- message code to lookup on error
		,@defaultMessageText              nvarchar(1000)											-- message text to return if no override in sf.Message
		,@arg1                            nvarchar(1000)											-- replacement text for "%1" in the message text
		,@arg2                            nvarchar(1000)											-- replacement text for "%2" in the message text
		,@arg3                            nvarchar(1000)											-- replacement text for "%3" in the message text
		,@arg4                            nvarchar(1000)											-- replacement text for "%4" in the message text
		,@arg5                            nvarchar(1000)											-- replacement text for "%5" in the message text
		,@recentAccessHours               smallint														-- configuration value for "recent" insert threshold
		,@isInsert                        bit             = 0									-- 1 if record appears to be an insert (see logic below)
		,@isUpdate                        bit             = 0									-- 1 if not a "new" record
		,@isRecentInsert                  bit             = 0									-- 1 if record was inserted within RECENT hours
		,@ON                              bit             = cast(1 as bit)		-- a constant to reduce repetitive cast syntax in bit comparisons
		,@OFF                             bit             = cast(0 as bit)		-- a constant to reduce repetitive cast syntax in bit comparisons

	-- get configuration value or default to 24 hours

	set @recentAccessHours = isnull(convert(smallint, sf.fConfigParam#Value('RecentAccessHours')), 24)

	if datediff(hour, @CreateTime, sysdatetimeoffset()) > @recentAccessHours-- older than "recent" hours - update only
	begin
		set @isUpdate = @ON
	end
	else if datediff(second, @CreateTime, sysdatetimeoffset()) <= 2					-- record is only 2 seconds old - assume INSERT
	begin
		set @isInsert       = @ON
		set @isRecentInsert = @ON
	end
	else																																		-- record inserted within configured "recent" hours
	begin
		set @isUpdate       = @ON
		set @isRecentInsert = @ON
	end
	
	--!<BusinessRules>
	
	--!<Rule Author="$AutoRules | Tim Edlund">
	if @isInsert = @ON																											-- applies when inserting
	begin
		if (select x.IsActive from sf.AuthenticationAuthority x where x.AuthenticationAuthoritySID = @AuthenticationAuthoritySID) = @OFF-- and parent row is inactive
		begin
			set @errorMessageSCD    = 'MBR.AssignmentToInactiveParent.AuthenticationAuthoritySID'
			set @columnNames        = N'AuthenticationAuthoritySID'
			set @defaultMessageText = N'The %1 is marked inactive. Assign an active %1.'
			set @arg1               = N'authentication authority'
		end
	end
	--!</Rule>
	
	--!<Rule Author="$AutoRules | Tim Edlund">
	if @isInsert = @ON																											-- applies when inserting
	begin
		if (select x.IsActive from sf.Culture x where x.CultureSID = @CultureSID) = @OFF								-- and parent row is inactive
		begin
			set @errorMessageSCD    = 'MBR.AssignmentToInactiveParent.CultureSID'
			set @columnNames        = N'CultureSID'
			set @defaultMessageText = N'The %1 is marked inactive. Assign an active %1.'
			set @arg1               = N'culture'
		end
	end
	--!</Rule>
	
	--!<Rule Author="$AutoRules | Tim Edlund">
	if @errorMessageSCD is null and sf.fBusinessRuleIsEnforced(N'sf',N'ApplicationUser','ValueIsRequired.GlassBreakPassword') = @ON and @GlassBreakPassword is null
	begin
		set @errorMessageSCD    = 'ValueIsRequired.GlassBreakPassword'
		set @columnNames        = N'GlassBreakPassword'
		set @defaultMessageText = N'A value for "%1" is required.'
		set @arg1               = N'Glass Break Password'
	end
	--!</Rule>
	
	--!<Rule Author="$AutoRules | Tim Edlund">
	if @errorMessageSCD is null and sf.fBusinessRuleIsEnforced(N'sf',N'ApplicationUser','ValueIsRequired.LastGlassBreakPasswordChangeTime') = @ON and @LastGlassBreakPasswordChangeTime is null
	begin
		set @errorMessageSCD    = 'ValueIsRequired.LastGlassBreakPasswordChangeTime'
		set @columnNames        = N'LastGlassBreakPasswordChangeTime'
		set @defaultMessageText = N'A value for "%1" is required.'
		set @arg1               = N'Last Glass Break Password Change Time'
	end
	--!</Rule>
	
	--!<Rule Author="Tim Edlund | Nov 2012" Updates="Kris, Oct 2014, admin@helpdesk is invalid (system account) | Cory, Aug 2016">
	if @errorMessageSCD is null and (sf.fIsStringContentValid(@UserName, N'abcdefghijklmnopqrstuvwxyzÃÃ©Ã¢ÃªÃ®Ã´Ã»Ã Ã¨Ã¹Ã«Ã¯Ã¼0123456789@.-_') = @OFF
	or (@UserName not like N'%@%' and @UserName <> N'SysAdmin' and @UserName <> N'JobExec' and @UserName <> N'admin@helpdesk'))
	begin
		set @errorMessageSCD      = 'MBR.UserNameFormat.UserName'
		set @columnNames          = N'UserName'
		set @defaultMessageText   = N'The username must be in the form "name@domain" and match the login ID on the network. Do NOT use the backslash format (name\domain).  Non-alphanumeric characters except "@", "." and "_" are not valid.'
	end	--!</Rule>
	
	--!<Rule Author="Tim Edlund | Mar 2012" Updates="None">
	if @errorMessageSCD is null and ((@LastReviewTime is not null and @LastReviewUser is null) or (@LastReviewUser is not null and @LastReviewTime is null))
	begin
		set @errorMessageSCD      = 'MBR.BothOrNeither.LastReviewTime'
		set @columnNames          = N'LastReviewTime, LastReviewUser'
		set @defaultMessageText   = N'The "last review time" and "review user" must both be filled in (or both blank for non-reviewed profiles).'
	end
	--!</Rule>
	
	--!<Rule Author="Tim Edlund | Nov 2012" Updates="None">
	if @errorMessageSCD is null and @LastReviewTime > sysdatetimeoffset()
	begin
		set @errorMessageSCD      = 'MBR.NoFutureDating.LastReviewTime'		set @columnNames = N'LastReviewTime'
		set @defaultMessageText   = N'The last review time cannot be future dated.'
	end
	--!</Rule>
	
	--!<Rule Author="Tim Edlund | Dec 2012" Updates="None">
	if @errorMessageSCD is null and sf.fIsGrantedToUserName('SysAdmin', @UserName) = @ON and @IsActive = @OFF
	begin

		if not exists
		(
			select
				1
			from
				sf.ApplicationUser au
			where
				au.ApplicationUserSID <> @ApplicationUserSID
			and
				sf.fIsGrantedToUserSID('SysAdmin', au.ApplicationUserSID) = @ON
		)
		begin
			set @errorMessageSCD    = 'MBR.LastSysAdmin.IsActive'
			set @columnNames        = N'IsActive'
			set @defaultMessageText = N'The last system administrator account cannot be inactivated.'
		end

	end
	--!</Rule>
	
	--!<Rule Author="Cory Ng | Sep 2014" Updates="None">
	declare
			@fileAsName    nvarchar(65)

	if @errorMessageSCD is null and @IsActive = @OFF
	begin

		select
			@fileAsName =  au.FileAsName
		from
			sf.TaskQueue tq
		join
			sf.vApplicationUser au on tq.ApplicationUserSID = au.ApplicationUserSID
		where
			tq.ApplicationUserSID = @ApplicationUserSID

		if @fileAsName is not null
			begin
			set @errorMessageSCD      = 'MBR.IsOwner.IsActive'
			set @columnNames          = N'IsActive'
			set @defaultMessageText		= N'The %1 "%2" cannot be marked inactive because they are owners of one or more %3 records'
			set @arg1									= N'user'
			set @arg2									= @fileAsName
			set @arg3									= N'task queue'
		end
	end
	--!</Rule>
	
	--!<Rule Author="Tim Edlund | Sep 2015" Updates="None">
	if @errorMessageSCD is null
	begin

		if db_name() = 'TenantServices' and @GlassBreakPassword is null
		begin
			set @errorMessageSCD      = 'PasswordRequiredInTS'
			set @defaultMessageText   = N'A password must be provided on this user record (tenant services database).'
		end

	end
	--!</Rule>
	
	--!<Rule Author="?Template | Apr 2019" Updates="None">
	if @errorMessageSCD is null --and sf.fBusinessRuleIsEnforced(N'sf',N'ApplicationUser','?SomeMessageCode.ColumnName') = 1					-- check if rule is ON - REMOVE for mandatory rules
	and 1 = 0
	begin
		set @errorMessageSCD      = '?SomeMessageCode.ColumnName'
		set @columnNames          = N'?ColumnName1, ?ColumnName2'
		set @defaultMessageText   = N'?Some default message text ...'
		set @arg1                 = N'?SomeReplacementValue'
	end
	--!</Rule>
	
	--!</BusinessRules>
	
	if @errorMessageSCD is not null
	begin
	
		set @errorText = sf.fCheckConstraintErrorString
			(
			 @errorMessageSCD
			,@defaultMessageText
			,@columnNames
			,@ApplicationUserSID
			,@arg1
			,@arg2
			,@arg3
			,@arg4
			,@arg5
			)
	
	end
	
	-- cast returns TRUE if no errors (@errorText=1) but throws an exception for processing by sf.pErrorRethrow otherwise
	
	return cast(@errorText as bit)
end
GO
