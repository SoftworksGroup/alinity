SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [sf].[pFormVersion#Update]
	 @FormVersionSID     int               = null -- required! id of row to update - must be set in custom logic if not passed
	,@FormSID            int               = null -- table column values to update:
	,@VersionNo          smallint          = null
	,@RevisionNo         smallint          = null
	,@FormDefinition     xml               = null
	,@IsSaveDisplayed    bit               = null
	,@ApprovedTime       datetimeoffset(7) = null
	,@ChangeNotes        nvarchar(max)     = null
	,@UserDefinedColumns xml               = null
	,@FormVersionXID     varchar(150)      = null
	,@LegacyKey          nvarchar(50)      = null
	,@UpdateUser         nvarchar(75)      = null -- set to current application user unless "SystemUser" passed
	,@RowStamp           timestamp         = null -- row time stamp - pass for preemptive check for overwrites
	,@IsReselected       tinyint           = 0    -- when 1 all columns in entity view are returned, 2 PK only, 0 none
	,@IsNullApplied      bit               = 0    -- when 1 null parameters overwrite corresponding columns with null
	,@zContext           xml               = null -- other values defining context for the update (if any)
	,@FormTypeSID        int               = null -- not a base table column
	,@FormName           nvarchar(65)      = null -- not a base table column
	,@FormLabel          nvarchar(35)      = null -- not a base table column
	,@FormContext        varchar(25)       = null -- not a base table column
	,@AuthorCredit       nvarchar(500)     = null -- not a base table column
	,@FormIsActive       bit               = null -- not a base table column
	,@ApplicationUserSID int               = null -- not a base table column
	,@FormRowGUID        uniqueidentifier  = null -- not a base table column
	,@IsDeleteEnabled    bit               = null -- not a base table column
	,@IsApproved         bit               = null -- not a base table column
as
/*********************************************************************************************************************************
Procedure : sf.pFormVersion#Update
Notice    : Copyright Â© 2019 Softworks Group Inc.
Summary   : updates 1 row in the sf.FormVersion table
-----------------------------------------------------------------------------------------------------------------------------------
Author    : Generated by DB Studio: pSprocGen | Designer: Tim Edlund
Version   : March 2019
-----------------------------------------------------------------------------------------------------------------------------------
Comments
--------
This procedure is used to update the sf.FormVersion table. The procedure requires a primary key to locate the record to update.
Additional parameters are provided for all columns in the vFormVersion entity view, however, the base logic of the procedure
updates the columns of the table only. Table-specific logic can be added through tagged sections (pre and post update) and a call
to an extended procedure supports client-specific logic. Logic implemented within code tags (table-specific logic) is part of the
base product and applies to all client configurations. Calls to the extended procedure occur immediately after the table-specific
logic in both "pre-update" and "post-update" contexts.  A transaction is used to commit/rollback all changes as a logical unit.

Client specific customizations must be implemented in the ext.pFormVersion procedure. The extended procedure is only called
where it exists in the DB. The first parameter passed @Mode is set to either "update.pre" or "update.post" to provide context for
the extended logic.

The @zContext parameter is an additional construct available to support overrides where different results are produced based on
content provided in the XML from the client tier. This parameter may contain multiple values.

The "@IsReselected" parameter controls output and "@IsNullApplied" controls whether or not parameters with null values overwrite
corresponding columns on the row.

For client-tier calls using the Microsoft Entity Framework and RIA Services, the @IsReselected bit should be passed as 1 to
force re-selection of table columns + extended view columns (the entity view).

Values for parameters representing mandatory columns must be provided unless @IsNullApplied is passed as 0. If @IsNullApplied = 1
any parameter with a null value overwrites the corresponding column value with null.  @IsNullApplied defaults to 0 but should be
passed as 1 when calling through the entity framework domain service since all columns are mapped to the procedure.

If the @UpdateUser parameter is passed as the special value "SystemUser", then the system user established in sf.ConfigParam
is applied. This option is useful for conversion and system generated updates the user would not recognize as having caused. Any
other value provided for the parameter (including null) is overwritten with the current application user.

The @RowStamp parameter should always be passed when calling from the user interface. The @RowStamp parameter is used to
preemptively check for an overwrite.  The value should be passed as the RowStamp value from the row when it was last
retrieved into the UI. If the RowStamp on the record changes from the value passed, this procedure will raise an exception and
avoid the overwrite.  For calls from back-end procedures, the @RowStamp parameter can be left blank and it will default to the
current time stamp on the record (avoiding the need to look up the value prior to calling.)

Business rule compliance is checked through a table constraint which calls fFormVersionCheck to test all rules.

-------------------------------------------------------------------------------------------------------------------------------- */

begin
	set nocount on

	declare
		 @errorNo                                      int = 0								-- 0 no error, <50000 SQL error, else business rule
		,@tranCount                                    int = @@trancount			-- determines whether a wrapping transaction exists
		,@sprocName                                    nvarchar(128) = object_name(@@procid)						-- name of currently executing procedure
		,@xState                                       int										-- error state detected in catch block
		,@errorText                                    nvarchar(4000)					-- message text (for business rule errors)
		,@rowsAffected                                 int = 0								-- tracks rows impacted by the operation (error check)
		,@recordSID                                    int										-- tracks primary key value for clearing current default
		,@ON                                           bit = cast(1 as bit)		-- constant for bit comparison and assignments
		,@OFF                                          bit = cast(0 as bit)		-- constant for bit comparison and assignments

	begin try

		-- use a transaction so that any additional updates implemented through the extended
		-- procedure or through table-specific logic succeed or fail as a logical unit

		if @tranCount = 0																											-- no outer transaction
		begin
			begin transaction
		end
		else																																	-- outer transaction so create save point
		begin
			save transaction @sprocName
		end

		-- check parameters

		if @FormVersionSID is null
		begin

			exec sf.pMessage#Get
				 @MessageSCD  	= 'BlankParameter'
				,@MessageText 	= @errorText output
				,@DefaultText 	= N'A parameter (%1) required by the database procedure was left blank.'
				,@Arg1					= '@FormVersionSID'

			raiserror(@errorText, 18, 1)
		end

		-- remove leading and trailing spaces from character type columns

		set @ChangeNotes = ltrim(rtrim(@ChangeNotes))
		set @FormVersionXID = ltrim(rtrim(@FormVersionXID))
		set @LegacyKey = ltrim(rtrim(@LegacyKey))
		set @UpdateUser = ltrim(rtrim(@UpdateUser))
		set @FormName = ltrim(rtrim(@FormName))
		set @FormLabel = ltrim(rtrim(@FormLabel))
		set @FormContext = ltrim(rtrim(@FormContext))
		set @AuthorCredit = ltrim(rtrim(@AuthorCredit))

		-- set zero length strings to null to avoid storing them in the record

		if len(@ChangeNotes) = 0 set @ChangeNotes = null
		if len(@FormVersionXID) = 0 set @FormVersionXID = null
		if len(@LegacyKey) = 0 set @LegacyKey = null
		if len(@UpdateUser) = 0 set @UpdateUser = null
		if len(@FormName) = 0 set @FormName = null
		if len(@FormLabel) = 0 set @FormLabel = null
		if len(@FormContext) = 0 set @FormContext = null
		if len(@AuthorCredit) = 0 set @AuthorCredit = null

		-- set the ID of the user

		if isnull(@UpdateUser, 'x') = N'SystemUser' set @UpdateUser = left(sf.fConfigParam#Value('SystemUser'),75)-- override for "SystemUser"
		if isnull(@UpdateUser, 'x') <> N'SystemUser' set @UpdateUser = sf.fApplicationUserSession#UserName()			-- application user - or DB user if no application session set

		-- avoid overwriting with null parameter values (unless specified)
		-- by retrieving existing values from the entity row for blank parameters

		if @IsNullApplied = 0
		begin

			select
				 @FormSID            = isnull(@FormSID,fv.FormSID)
				,@VersionNo          = isnull(@VersionNo,fv.VersionNo)
				,@RevisionNo         = isnull(@RevisionNo,fv.RevisionNo)
				,@FormDefinition     = isnull(@FormDefinition,fv.FormDefinition)
				,@IsSaveDisplayed    = isnull(@IsSaveDisplayed,fv.IsSaveDisplayed)
				,@ApprovedTime       = isnull(@ApprovedTime,fv.ApprovedTime)
				,@ChangeNotes        = isnull(@ChangeNotes,fv.ChangeNotes)
				,@UserDefinedColumns = isnull(@UserDefinedColumns,fv.UserDefinedColumns)
				,@FormVersionXID     = isnull(@FormVersionXID,fv.FormVersionXID)
				,@LegacyKey          = isnull(@LegacyKey,fv.LegacyKey)
				,@UpdateUser         = isnull(@UpdateUser,fv.UpdateUser)
				,@IsReselected       = isnull(@IsReselected,fv.IsReselected)
				,@IsNullApplied      = isnull(@IsNullApplied,fv.IsNullApplied)
				,@zContext           = isnull(@zContext,fv.zContext)
				,@FormTypeSID        = isnull(@FormTypeSID,fv.FormTypeSID)
				,@FormName           = isnull(@FormName,fv.FormName)
				,@FormLabel          = isnull(@FormLabel,fv.FormLabel)
				,@FormContext        = isnull(@FormContext,fv.FormContext)
				,@AuthorCredit       = isnull(@AuthorCredit,fv.AuthorCredit)
				,@FormIsActive       = isnull(@FormIsActive,fv.FormIsActive)
				,@ApplicationUserSID = isnull(@ApplicationUserSID,fv.ApplicationUserSID)
				,@FormRowGUID        = isnull(@FormRowGUID,fv.FormRowGUID)
				,@IsDeleteEnabled    = isnull(@IsDeleteEnabled,fv.IsDeleteEnabled)
				,@IsApproved         = isnull(@IsApproved,fv.IsApproved)
			from
				sf.vFormVersion fv
			where
				fv.FormVersionSID = @FormVersionSID

		end
		
		if @IsApproved = @ON and @ApprovedTime is null set @ApprovedTime = sysdatetimeoffset()					-- set column when null and extended view bit is passed to set it

		-- block changing FK values to parent records which are inactive (UI should prevent this)
		
		if (select x.FormSID from sf.FormVersion x where x.FormVersionSID = @FormVersionSID) <> @FormSID
		begin
			if (select x.IsActive from sf.Form x where x.FormSID = @FormSID) = @OFF
			begin
				
				exec sf.pMessage#Get
					 @MessageSCD  = 'AssignmentToInactiveParent'
					,@MessageText = @errorText output
					,@DefaultText = N'The %1 assigned is marked inactive. Leave the record unchanged or set to an active %1.'
					,@Arg1        = N'form'
				
				raiserror(@errorText, 16, 1)
				
			end
		end

		-- apply the table-specific pre-update logic (if any)

		--! <PreUpdate>
		-- Tim Edlund | Mar 2017
		-- If the approved time is set and no specific version number is
    -- passed in, assign the next version number.  Otherwise, increment
    -- the revision number for the form.

    if @ApprovedTime is not null and exists(select 1 from sf.FormVersion fv where fv.FormVersionSID = @FormVersionSID and fv.ApprovedTime is null)
    begin

      if isnull(@VersionNo,0) = 0
      begin
        select @VersionNo = max(fv.VersionNo) from sf.FormVersion fv where fv.FormSID = @FormSID
        set @VersionNo    = isnull(@VersionNo,0) + 1
      end
else
      begin

        -- where another version is being passed in, remove the version from
        -- the prior revision it is attached to

        update
          sf.FormVersion
        set
            VersionNo			= 0
					 ,ApprovedTime	= null
        where
          FormSID = @FormSID
        and
          VersionNo = @VersionNo

      end

    end
    else
    begin
      select @RevisionNo = max(fv.RevisionNo) from sf.FormVersion fv where fv.FormSID = @FormSID
      set @RevisionNo    = isnull(@RevisionNo,1000) + 1
    end
		--! </PreUpdate>

		-- update the record

		update
			sf.FormVersion
		set
			 FormSID = @FormSID
			,VersionNo = @VersionNo
			,RevisionNo = @RevisionNo
			,FormDefinition = @FormDefinition
			,IsSaveDisplayed = @IsSaveDisplayed
			,ApprovedTime = @ApprovedTime
			,ChangeNotes = @ChangeNotes
			,UserDefinedColumns = @UserDefinedColumns
			,FormVersionXID = @FormVersionXID
			,LegacyKey = @LegacyKey
			,UpdateUser = @UpdateUser
			,UpdateTime = sysdatetimeoffset()
		where
			FormVersionSID = @FormVersionSID
			and
			RowStamp = isnull(@RowStamp, RowStamp)

		set @rowsAffected = @@rowcount

		-- check for errors

		if @rowsAffected = 0
		begin
			
			if exists (select 1 from sf.FormVersion where FormVersionSID = @formVersionSID)
			begin
				
				exec sf.pMessage#Get
					 @MessageSCD  = 'UpdateBlocked'
					,@MessageText = @errorText output
					,@DefaultText = N'A change was made to the "%1" record since it was last retrieved. The overwrite was avoided. Refresh the record and try again.'
					,@Arg1        = 'sf.FormVersion'
				
				raiserror(@errorText, 16, 1)
			end
			else
			begin
				
				exec sf.pMessage#Get
					 @MessageSCD  = 'RecordNotFound'
					,@MessageText = @errorText output
					,@DefaultText = N'The %1 record was not found. Record ID = "%2". The record may have been deleted or the identifier is invalid.'
					,@Arg1        = 'sf.FormVersion'
					,@Arg2        = @formVersionSID
				
				raiserror(@errorText, 18, 1)
			end

		end
		else if @rowsAffected <> 1
		begin

			exec sf.pMessage#Get
				 @MessageSCD  = 'RowCountUnexpected'
				,@MessageText = @errorText output
				,@DefaultText = N'The %1 operation on table "%2" affected an unexpected number of rows (%3). Record ID = %4.'
				,@Arg1        = 'update'
				,@Arg2        = 'sf.FormVersion'
				,@Arg3        = @rowsAffected
				,@Arg4        = @formVersionSID
			
			raiserror(@errorText, 18, 1)
		end

		-- apply the table-specific post-update logic (if any)

		--! <PostUpdate>
		--  insert post-update logic here ...
		--! </PostUpdate>

		if @trancount = 0 and xact_state() = 1 commit transaction

		-- return all columns for entity (1), just the PK value (2), or no returned value (0)

		if @IsReselected = 2
		begin

			select
				 ent.FormVersionSID
			from
				sf.vFormVersion ent
			where
				ent.FormVersionSID = @FormVersionSID

		end
		else if @IsReselected = 1
		begin

			select
				 ent.FormVersionSID
				,ent.FormSID
				,ent.VersionNo
				,ent.RevisionNo
				,ent.FormDefinition
				,ent.IsSaveDisplayed
				,ent.ApprovedTime
				,ent.ChangeNotes
				,ent.UserDefinedColumns
				,ent.FormVersionXID
				,ent.LegacyKey
				,ent.IsDeleted
				,ent.CreateUser
				,ent.CreateTime
				,ent.UpdateUser
				,ent.UpdateTime
				,ent.RowGUID
				,ent.RowStamp
				,ent.FormTypeSID
				,ent.FormName
				,ent.FormLabel
				,ent.FormContext
				,ent.AuthorCredit
				,ent.FormIsActive
				,ent.ApplicationUserSID
				,ent.FormRowGUID
				,ent.IsDeleteEnabled
				,ent.IsReselected
				,ent.IsNullApplied
				,ent.zContext
				,ent.IsApproved
			from
				sf.vFormVersion ent
			where
				ent.FormVersionSID = @FormVersionSID

		end

	end try

	begin catch
		set @xState = xact_state()
		
		if @tranCount > 0 and @xState = 1
		begin
			rollback transaction @sprocName																			-- committable wrapping trx exists: rollback to savepoint
		end
		else if @xState <> 0																									-- full rollback
		begin
			rollback
		end
		
		exec @errorNo = sf.pErrorRethrow																			-- process message text and re-throw the error
	end catch

	return(@errorNo)

end
GO
