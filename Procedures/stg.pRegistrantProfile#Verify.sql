SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [stg].[pRegistrantProfile#Verify]
	 @RowCount                int                  = null output						-- count of records processed
	,@RuleCount               tinyint              = null output						-- count of business rules enforced on the table
	,@ErrorCount              int                  = null output						-- count of errors encountered
	,@ReturnSelect            bit                  = 0											-- when 1 output values are returned as a dataset
as
/*********************************************************************************************************************************
Sproc    : Business Rule Verification for stg.RegistrantProfile
Notice   : Copyright Â© 2012 Softworks Group Inc.
Summary  : checks stg.RegistrantProfile for current business rules and logs errors encountered into sf.BusinessRuleError
-----------------------------------------------------------------------------------------------------------------------------------
Author    : Generated by DB Studio: pCheckFcnGen | Designer: Tim Edlund
Version   : April 2019
-----------------------------------------------------------------------------------------------------------------------------------
Comments
--------
This procedure is used to verify that data in the stg.RegistrantProfile table meets the business rules currently in effect for it.
This is a batch operation that calls the verification function, stg.fRegistrantProfile#Check(), on each row. If an error is
detected it is logged to the sf.BusinessRuleError table for review in the UI and follow-up.  The verification function is the same
one used for online checking through a table check constraint.  The procedure leaves the table with the check constraint enabled,
however, if errors were encountered the constraint is enabled with the NOCHECK option.

The SGI standard for enforcing business rules, except those that apply only on DELETE, is to use a check constraint.  A single
check constraint is implemented on each table. The one constraint checks all business rules by calling a function and passing
it all columns in the table. This procedure calls that same function but using SELECT syntax to check for errors.  Note that even
where the constraint was enabled with the "CHECK" option, the need for batch checking still exists.  The reason is that optional
business rules can be turned on and off through the UI.  The check function is designed so that it only applies rules which have
an active status. When rule settings are changed therefore the table data needs to be re-verified because additional rules may
now be active.

The procedure verifies the data according to the following algorithm. First, it removes and then attempts to re-apply a table
constraint using the CHECK option (the default).  Since the constraint references the check function and all rows are evaluated
before the constraint is applied with the CHECK option. If the process succeeds all rows are valid and processing is complete.

If an error is encountered on the attempt to apply the constraint using CHECK, then the procedure calls the function using SELECT
syntax on each row. Any errors encountered are swallowed and logged into the sf.BusinessRuleError table for review in the
UI and correction.  The row-by-agonizing-row (RBAR) method is required so that logging of errors by individual rows can be
achieved. When the process completes the check constraint is enabled, but this time using the NOCHECK option since errors are
known to exist. The constraint ensures that no future edits or additions to the table's rows will be accepted unless they are
valid.

Any previous errors logged for the table are removed before the process begins (using either method).

The procedure sets the status of each business rule record (sf.BusinessRule) to in-process while the procedure is executing.  This
status is reflected in the UI for monitoring.  Note also that the procedure ensures any mandatory business rules are enabled before
the process begins.  This is done to protect against situations where a developer forgot to re-enable rules after a data loading
or conversion task.

Example:

	exec stg.pRegistrantProfile#Verify
		@ReturnSelect = 1

select * from sf.vBusinessRule      where ApplicationEntitySCD = 'stg.RegistrantProfile'
select * from sf.vBusinessRuleError where ApplicationEntitySCD = 'stg.RegistrantProfile'

-------------------------------------------------------------------------------------------------------------------------------- */

begin
	set nocount on

	declare
		 @errorNo                           int = 0														-- 0 no error, <50000 SQL error, else business rule
		,@errorText                         nvarchar(4000)										-- message text (for business rule errors)
		,@i                                 int																-- loop index
		,@j                                 int																-- string position index
		,@nextSID                           int																-- next row PK value to process
		,@nextGUID                          uniqueidentifier									-- next row GUID value - applied to error log
		,@isValid                           bit																-- return value from check function call
		,@systemUser                        nvarchar(75)											-- for audit details recorded on error log
		,@runRBAR                           bit  = 0													-- tracks if "row-by-agonizing-row" process is needed
		,@messageSCD                        varchar(75)												-- message code as found in sf.Message
		,@messageText                       nvarchar(1000)										-- default text to add for new sf.Message records
		,@errorSeverity                     int																-- severity: 16 user, 17 configuration, 18 program
		,@columnNames                       xml																-- column name or column name list returned FOR XML
		,@applicationEntitySID              int																-- id of table in sf.ApplicationEntity - for logging
		,@newBusinessRuleSID                int																-- id for new business rule records added during verification
		,@columnName											  nvarchar(128)											-- column name rule applies to if check is duplicated

	declare
		@work                               table
		(
			 ID             int               identity(1,1)
			,RowSID         int               not null
			,RowGUID        uniqueidentifier  not null
		)

	set @RowCount   = 0																											-- ensure output values are initialized in all code paths
	set @RuleCount  = 0
	set @ErrorCount = 0

	begin try

		-- remove previous error log records for this table - set audit
		-- information for CDC tracking via update before making deletion

		set @systemUser = isnull(left(sf.fConfigParam#Value('SystemUser'),75), sf.fApplicationUserSession#UserName())

		begin transaction

		update
			sf.BusinessRuleError
		set
			 IsDeleted  = 1
			,UpdateUser = @systemUser
			,UpdateTime = sysdatetimeoffset()
		where
			BusinessRuleErrorSID
		in
			(
			select
				bre.BusinessRuleErrorSID
			from
				sf.vBusinessRuleError bre
			where
				bre.ApplicationEntitySCD = 'stg.RegistrantProfile'								-- the application entity SCD is the schema + table name
			)

		delete
			sf.BusinessRuleError
		where
			BusinessRuleErrorSID
		in
			(
			select
				bre.BusinessRuleErrorSID
			from
				sf.vBusinessRuleError bre
			where
				bre.ApplicationEntitySCD = 'stg.RegistrantProfile'
			)

		if @@rowcount > 0 and (select count(1) from sf.BusinessRuleError) = 0	-- if content was deleted and no rows remain, reset identity
		begin
			dbcc checkident('sf.BusinessRuleError',reseed, 1000000) with NO_INFOMSGS
		end

		commit

		-- ensure all mandatory rules for the table are enabled

		update
			br
		set
			 BusinessRuleStatus = 'p'
			,UpdateUser          = @systemUser
			,UpdateTime          = sysdatetimeoffset()
		from
			sf.BusinessRule  br
		join
			sf.vBusinessRule#Ext brx on br.BusinessRuleSID = brx.BusinessRuleSID
		where
			brx.ApplicationEntitySCD = 'stg.RegistrantProfile'
		and
			brx.IsMandatory = 1
		and
			br.BusinessRuleStatus = 'x'

		-- mark the active rules for the table as in process (!) to support monitoring

		update
			br
		set
			 BusinessRuleStatus = '!'
			,UpdateTime          = sysdatetimeoffset()													-- do not change UpdateUser so that person turning on rule remains
		from
			sf.BusinessRule br
		join
			sf.vBusinessRule#Ext brx on br.BusinessRuleSID = brx.BusinessRuleSID
		where
			brx.ApplicationEntitySCD = 'stg.RegistrantProfile'
		and
			br.BusinessRuleStatus <> 'x'

		-- method 1 - drop the check constraint if it exists and then re-apply it

		if exists
		(
		select
			1
		from
			sf.vCheckConstraint cc
		where
			cc.SchemaName = 'stg'
		and
			cc.ConstraintName = 'ck_RegistrantProfile'
		)
		begin
			exec sp_executesql N'alter table stg.RegistrantProfile drop constraint ck_RegistrantProfile'	-- drop via dynamic SQL to avoid reference errors in VS project
		end

		-- trap error so that RBAR processing can be executed if any rows are not valid

		begin try

			alter table stg.RegistrantProfile with CHECK add constraint ck_RegistrantProfile
			check
				(
				stg.fRegistrantProfile#Check
					(
					 RegistrantProfileSID
					,ImportFileSID
					,ProcessingStatusSID
					,LastName
					,FirstName
					,CommonName
					,MiddleNames
					,EmailAddress
					,HomePhone
					,MobilePhone
					,IsTextMessagingEnabled
					,GenderLabel
					,NamePrefixLabel
					,BirthDate
					,DeathDate
					,UserName
					,SubDomain
					,Password
					,StreetAddress1
					,StreetAddress2
					,StreetAddress3
					,CityName
					,StateProvinceName
					,PostalCode
					,CountryName
					,RegionLabel
					,RegistrantNo
					,PersonGroupLabel1
					,PersonGroupTitle1
					,PersonGroupIsAdministrator1
					,PersonGroupEffectiveDate1
					,PersonGroupExpiryDate1
					,PersonGroupLabel2
					,PersonGroupTitle2
					,PersonGroupIsAdministrator2
					,PersonGroupEffectiveDate2
					,PersonGroupExpiryDate2
					,PersonGroupLabel3
					,PersonGroupTitle3
					,PersonGroupIsAdministrator3
					,PersonGroupEffectiveDate3
					,PersonGroupExpiryDate3
					,PersonGroupLabel4
					,PersonGroupTitle4
					,PersonGroupIsAdministrator4
					,PersonGroupEffectiveDate4
					,PersonGroupExpiryDate4
					,PersonGroupLabel5
					,PersonGroupTitle5
					,PersonGroupIsAdministrator5
					,PersonGroupEffectiveDate5
					,PersonGroupExpiryDate5
					,PracticeRegisterLabel
					,PracticeRegisterSectionLabel
					,RegistrationEffectiveDate
					,QualifyingCredentialLabel
					,QualifyingCredentialOrgLabel
					,QualifyingProgramName
					,QualifyingProgramStartDate
					,QualifyingProgramCompletionDate
					,QualifyingFieldOfStudyName
					,CredentialLabel1
					,CredentialOrgLabel1
					,CredentialProgramName1
					,CredentialFieldOfStudyName1
					,CredentialEffectiveDate1
					,CredentialExpiryDate1
					,CredentialLabel2
					,CredentialOrgLabel2
					,CredentialProgramName2
					,CredentialFieldOfStudyName2
					,CredentialEffectiveDate2
					,CredentialExpiryDate2
					,CredentialLabel3
					,CredentialOrgLabel3
					,CredentialProgramName3
					,CredentialFieldOfStudyName3
					,CredentialEffectiveDate3
					,CredentialExpiryDate3
					,CredentialLabel4
					,CredentialOrgLabel4
					,CredentialProgramName4
					,CredentialFieldOfStudyName4
					,CredentialEffectiveDate4
					,CredentialExpiryDate4
					,CredentialLabel5
					,CredentialOrgLabel5
					,CredentialProgramName5
					,CredentialFieldOfStudyName5
					,CredentialEffectiveDate5
					,CredentialExpiryDate5
					,CredentialLabel6
					,CredentialOrgLabel6
					,CredentialProgramName6
					,CredentialFieldOfStudyName6
					,CredentialEffectiveDate6
					,CredentialExpiryDate6
					,CredentialLabel7
					,CredentialOrgLabel7
					,CredentialProgramName7
					,CredentialFieldOfStudyName7
					,CredentialEffectiveDate7
					,CredentialExpiryDate7
					,CredentialLabel8
					,CredentialOrgLabel8
					,CredentialProgramName8
					,CredentialFieldOfStudyName8
					,CredentialEffectiveDate8
					,CredentialExpiryDate8
					,CredentialLabel9
					,CredentialOrgLabel9
					,CredentialProgramName9
					,CredentialFieldOfStudyName9
					,CredentialEffectiveDate9
					,CredentialExpiryDate9
					,PersonSID
					,PersonEmailAddressSID
					,ApplicationUserSID
					,PersonMailingAddressSID
					,RegionSID
					,NamePrefixSID
					,GenderSID
					,CitySID
					,StateProvinceSID
					,CountrySID
					,RegistrantSID
					,RegistrantProfileXID
					,LegacyKey
					,IsDeleted
					,CreateUser
					,CreateTime
					,UpdateUser
					,UpdateTime
					,RowGUID
					) = 1
				)

			select @RowCount = count(1) from stg.RegistrantProfile							-- rules validated - calculate row count to return

		end try

		begin catch

			set @errorText       = error_message()
			set @errorSeverity   = error_severity()

			if @errorText like N'%<err>%</err>%'																-- business rule violation raised via check constraint
			begin
				set @runRBAR = 1
			end
			else
			begin
				exec @errorNo = sf.pErrorRethrow																	-- unexpected error - rethrow it
			end

		end catch

		-- method 2 - only applied if constraint could not be enabled above

		if @runRBAR = 1
		begin

			select
				@applicationEntitySID = ae.ApplicationEntitySID										-- obtain application entity pk for logging
			from
				sf.vApplicationEntity ae
			where
				ae.BaseTableSchemaName = 'stg'
			and
				ae.BaseTableName       = 'RegistrantProfile'

			insert
				@work																															-- load a work table with pk values to process
			select
				 x.RegistrantProfileSID
				,x.RowGUID
			from
				stg.RegistrantProfile x
			order by
				x.RegistrantProfileSID

			set @RowCount    = @@rowcount
			set @ErrorCount = 0
			set @i          = 0

			while @i < @RowCount																								-- check rules for each row
			begin

				set @i += 1

				select
					 @nextSID   = w.RowSID
					,@nextGUID  = w.RowGUID
				from
					@work w
				where
					ID = @i

				-- call the function on the row and trap any errors with an inner catch block
				-- report the error and continue processing

				begin try

					select
						@isValid = stg.fRegistrantProfile#Check
							(
							 x.RegistrantProfileSID
							,x.ImportFileSID
							,x.ProcessingStatusSID
							,x.LastName
							,x.FirstName
							,x.CommonName
							,x.MiddleNames
							,x.EmailAddress
							,x.HomePhone
							,x.MobilePhone
							,x.IsTextMessagingEnabled
							,x.GenderLabel
							,x.NamePrefixLabel
							,x.BirthDate
							,x.DeathDate
							,x.UserName
							,x.SubDomain
							,x.Password
							,x.StreetAddress1
							,x.StreetAddress2
							,x.StreetAddress3
							,x.CityName
							,x.StateProvinceName
							,x.PostalCode
							,x.CountryName
							,x.RegionLabel
							,x.RegistrantNo
							,x.PersonGroupLabel1
							,x.PersonGroupTitle1
							,x.PersonGroupIsAdministrator1
							,x.PersonGroupEffectiveDate1
							,x.PersonGroupExpiryDate1
							,x.PersonGroupLabel2
							,x.PersonGroupTitle2
							,x.PersonGroupIsAdministrator2
							,x.PersonGroupEffectiveDate2
							,x.PersonGroupExpiryDate2
							,x.PersonGroupLabel3
							,x.PersonGroupTitle3
							,x.PersonGroupIsAdministrator3
							,x.PersonGroupEffectiveDate3
							,x.PersonGroupExpiryDate3
							,x.PersonGroupLabel4
							,x.PersonGroupTitle4
							,x.PersonGroupIsAdministrator4
							,x.PersonGroupEffectiveDate4
							,x.PersonGroupExpiryDate4
							,x.PersonGroupLabel5
							,x.PersonGroupTitle5
							,x.PersonGroupIsAdministrator5
							,x.PersonGroupEffectiveDate5
							,x.PersonGroupExpiryDate5
							,x.PracticeRegisterLabel
							,x.PracticeRegisterSectionLabel
							,x.RegistrationEffectiveDate
							,x.QualifyingCredentialLabel
							,x.QualifyingCredentialOrgLabel
							,x.QualifyingProgramName
							,x.QualifyingProgramStartDate
							,x.QualifyingProgramCompletionDate
							,x.QualifyingFieldOfStudyName
							,x.CredentialLabel1
							,x.CredentialOrgLabel1
							,x.CredentialProgramName1
							,x.CredentialFieldOfStudyName1
							,x.CredentialEffectiveDate1
							,x.CredentialExpiryDate1
							,x.CredentialLabel2
							,x.CredentialOrgLabel2
							,x.CredentialProgramName2
							,x.CredentialFieldOfStudyName2
							,x.CredentialEffectiveDate2
							,x.CredentialExpiryDate2
							,x.CredentialLabel3
							,x.CredentialOrgLabel3
							,x.CredentialProgramName3
							,x.CredentialFieldOfStudyName3
							,x.CredentialEffectiveDate3
							,x.CredentialExpiryDate3
							,x.CredentialLabel4
							,x.CredentialOrgLabel4
							,x.CredentialProgramName4
							,x.CredentialFieldOfStudyName4
							,x.CredentialEffectiveDate4
							,x.CredentialExpiryDate4
							,x.CredentialLabel5
							,x.CredentialOrgLabel5
							,x.CredentialProgramName5
							,x.CredentialFieldOfStudyName5
							,x.CredentialEffectiveDate5
							,x.CredentialExpiryDate5
							,x.CredentialLabel6
							,x.CredentialOrgLabel6
							,x.CredentialProgramName6
							,x.CredentialFieldOfStudyName6
							,x.CredentialEffectiveDate6
							,x.CredentialExpiryDate6
							,x.CredentialLabel7
							,x.CredentialOrgLabel7
							,x.CredentialProgramName7
							,x.CredentialFieldOfStudyName7
							,x.CredentialEffectiveDate7
							,x.CredentialExpiryDate7
							,x.CredentialLabel8
							,x.CredentialOrgLabel8
							,x.CredentialProgramName8
							,x.CredentialFieldOfStudyName8
							,x.CredentialEffectiveDate8
							,x.CredentialExpiryDate8
							,x.CredentialLabel9
							,x.CredentialOrgLabel9
							,x.CredentialProgramName9
							,x.CredentialFieldOfStudyName9
							,x.CredentialEffectiveDate9
							,x.CredentialExpiryDate9
							,x.PersonSID
							,x.PersonEmailAddressSID
							,x.ApplicationUserSID
							,x.PersonMailingAddressSID
							,x.RegionSID
							,x.NamePrefixSID
							,x.GenderSID
							,x.CitySID
							,x.StateProvinceSID
							,x.CountrySID
							,x.RegistrantSID
							,x.RegistrantProfileXID
							,x.LegacyKey
							,x.IsDeleted
							,x.CreateUser
							,x.CreateTime
							,x.UpdateUser
							,x.UpdateTime
							,x.RowGUID
							)
					from
						stg.RegistrantProfile  x
					where
						x.RegistrantProfileSID = @nextSID

				end try

				begin catch

					set @errorText       = error_message()
					set @errorSeverity   = error_severity()

					if @errorText like N'%<err>%</err>%'														-- business rule violation raised via check constraint
					begin

						set @ErrorCount      += 1

						exec sf.pErrorRethrow$Check																		-- call subroutine from the error processor to parse the error text
							 @MessageSCD      = @messageSCD       output
							,@MessageText     = @errorText        output
							,@ErrorSeverity   = @errorSeverity    output
							,@ColumnNames     = @columnNames      output
							,@RowSID          = @nextSID          output

						if @nextSID is not null																				-- add PK value onto end of message text
						begin
							set @errorText = convert(nvarchar(1900), @errorText + N' [SID=' + convert(varchar(10), @nextSID) + ']')
						end

						-- before logging the error, ensure a business rule parent record exists

						set @newBusinessRuleSID = null

						-- if a column name is included with the message code, strip it out; it must
						-- appear as the ending segment

						set @columnName = replace(@messageSCD, 'MBR.', '')

						if @columnName like N'%.%'
						begin
							set @columnName = sf.fObjectName(@columnName)
							set @messageSCD = replace(@messageSCD, '.' + @columnName, '')
						end
						else
						begin
							set @columnName = null
						end

						select																												-- lookup the rule based on code, entity and column
							@newBusinessRuleSID = br.BusinessRuleSID
						from
							sf.vBusinessRule br
						where
							br.ApplicationEntitySID = @applicationEntitySID
						and
							br.MessageSCD = @messageSCD
						and
							br.ColumnName = @columnName

						if @newBusinessRuleSID is null																-- if a rule is not found, insert it
						begin

							set @messageText = cast(@errorText as nvarchar(1000))

							exec sf.pBusinessRule#Insert
								 @BusinessRuleSID       = @newBusinessRuleSID output
								,@MessageSCD            = @messageSCD
								,@ColumnName            = @columnName
								,@MessageText           = @messageText
								,@CreateUser            = @systemUser
								,@ApplicationEntitySID  = @applicationEntitySID

						end

						exec sf.pBusinessRuleError#Insert															-- log the error
							 @BusinessRuleSID       = @newBusinessRuleSID
							,@MessageSCD            = @messageSCD
							,@MessageText           = @errorText
							,@SourceSID             = @nextSID
							,@SourceGUID            = @nextGUID
							,@CreateUser            = @systemUser
							,@ApplicationEntitySID  = @applicationEntitySID

					end
					else
					begin
						exec @errorNo = sf.pErrorRethrow															-- unexpected error - rethrow it
					end

				end catch

			end																																	-- end loop

			-- turn on the constraint using NOCHECK to ensure any records
			-- or edited going forward are valid

			alter table stg.RegistrantProfile with NOCHECK add constraint ck_RegistrantProfile
			check
				(
				stg.fRegistrantProfile#Check
					(
					 RegistrantProfileSID
					,ImportFileSID
					,ProcessingStatusSID
					,LastName
					,FirstName
					,CommonName
					,MiddleNames
					,EmailAddress
					,HomePhone
					,MobilePhone
					,IsTextMessagingEnabled
					,GenderLabel
					,NamePrefixLabel
					,BirthDate
					,DeathDate
					,UserName
					,SubDomain
					,Password
					,StreetAddress1
					,StreetAddress2
					,StreetAddress3
					,CityName
					,StateProvinceName
					,PostalCode
					,CountryName
					,RegionLabel
					,RegistrantNo
					,PersonGroupLabel1
					,PersonGroupTitle1
					,PersonGroupIsAdministrator1
					,PersonGroupEffectiveDate1
					,PersonGroupExpiryDate1
					,PersonGroupLabel2
					,PersonGroupTitle2
					,PersonGroupIsAdministrator2
					,PersonGroupEffectiveDate2
					,PersonGroupExpiryDate2
					,PersonGroupLabel3
					,PersonGroupTitle3
					,PersonGroupIsAdministrator3
					,PersonGroupEffectiveDate3
					,PersonGroupExpiryDate3
					,PersonGroupLabel4
					,PersonGroupTitle4
					,PersonGroupIsAdministrator4
					,PersonGroupEffectiveDate4
					,PersonGroupExpiryDate4
					,PersonGroupLabel5
					,PersonGroupTitle5
					,PersonGroupIsAdministrator5
					,PersonGroupEffectiveDate5
					,PersonGroupExpiryDate5
					,PracticeRegisterLabel
					,PracticeRegisterSectionLabel
					,RegistrationEffectiveDate
					,QualifyingCredentialLabel
					,QualifyingCredentialOrgLabel
					,QualifyingProgramName
					,QualifyingProgramStartDate
					,QualifyingProgramCompletionDate
					,QualifyingFieldOfStudyName
					,CredentialLabel1
					,CredentialOrgLabel1
					,CredentialProgramName1
					,CredentialFieldOfStudyName1
					,CredentialEffectiveDate1
					,CredentialExpiryDate1
					,CredentialLabel2
					,CredentialOrgLabel2
					,CredentialProgramName2
					,CredentialFieldOfStudyName2
					,CredentialEffectiveDate2
					,CredentialExpiryDate2
					,CredentialLabel3
					,CredentialOrgLabel3
					,CredentialProgramName3
					,CredentialFieldOfStudyName3
					,CredentialEffectiveDate3
					,CredentialExpiryDate3
					,CredentialLabel4
					,CredentialOrgLabel4
					,CredentialProgramName4
					,CredentialFieldOfStudyName4
					,CredentialEffectiveDate4
					,CredentialExpiryDate4
					,CredentialLabel5
					,CredentialOrgLabel5
					,CredentialProgramName5
					,CredentialFieldOfStudyName5
					,CredentialEffectiveDate5
					,CredentialExpiryDate5
					,CredentialLabel6
					,CredentialOrgLabel6
					,CredentialProgramName6
					,CredentialFieldOfStudyName6
					,CredentialEffectiveDate6
					,CredentialExpiryDate6
					,CredentialLabel7
					,CredentialOrgLabel7
					,CredentialProgramName7
					,CredentialFieldOfStudyName7
					,CredentialEffectiveDate7
					,CredentialExpiryDate7
					,CredentialLabel8
					,CredentialOrgLabel8
					,CredentialProgramName8
					,CredentialFieldOfStudyName8
					,CredentialEffectiveDate8
					,CredentialExpiryDate8
					,CredentialLabel9
					,CredentialOrgLabel9
					,CredentialProgramName9
					,CredentialFieldOfStudyName9
					,CredentialEffectiveDate9
					,CredentialExpiryDate9
					,PersonSID
					,PersonEmailAddressSID
					,ApplicationUserSID
					,PersonMailingAddressSID
					,RegionSID
					,NamePrefixSID
					,GenderSID
					,CitySID
					,StateProvinceSID
					,CountrySID
					,RegistrantSID
					,RegistrantProfileXID
					,LegacyKey
					,IsDeleted
					,CreateUser
					,CreateTime
					,UpdateUser
					,UpdateTime
					,RowGUID
					) = 1
				)

		end																																		-- end @runRBAR = 1

		-- get count of rules being applied on this table

		select
			 @RuleCount = isnull(count(1),0)
		from
			sf.vBusinessRule br
		where
			br.ApplicationEntitySCD = 'stg.RegistrantProfile'
		and
			br.BusinessRuleStatus <> 'x'

		-- finally update the rule status to ON wherever the status was set to in-process

		update
			br
		set
			 BusinessRuleStatus = 'o'
			,UpdateTime          = sysdatetimeoffset()
		from
			sf.BusinessRule br
		join
			sf.vBusinessRule#Ext brx on br.BusinessRuleSID = brx.BusinessRuleSID
		where
			brx.ApplicationEntitySCD = 'stg.RegistrantProfile'
		and
			br.BusinessRuleStatus = '!'

		if @ReturnSelect = 1
		begin

			select
				 @RowCount    [RowCount]
				,@RuleCount    RuleCount
				,@ErrorCount   ErrorCount

		end

	end try

	begin catch

		-- on a general failure, reset the rule status back to pending

		update
			br
		set
			 BusinessRuleStatus = 'p'
			,UpdateTime          = sysdatetimeoffset()
		from
			sf.BusinessRule br
		join
			sf.vBusinessRule#Ext brx on br.BusinessRuleSID = brx.BusinessRuleSID
		where
			brx.ApplicationEntitySCD = 'stg.RegistrantProfile'
		and
			br.BusinessRuleStatus = '!'

		-- then re-throw to caller

		exec @errorNo = sf.pErrorRethrow																			-- catch the error, rollback if pending, and re-throw
	end catch

	return(@errorNo)

end
GO
