SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [sf].[pJobRun#Update]
	 @JobRunSID                       int               = null -- required! id of row to update - must be set in custom logic if not passed
	,@JobSID                          int               = null -- table column values to update:
	,@ConversationHandle              uniqueidentifier  = null
	,@CallSyntax                      nvarchar(max)     = null
	,@StartTime                       datetimeoffset(7) = null
	,@EndTime                         datetimeoffset(7) = null
	,@TotalRecords                    int               = null
	,@TotalErrors                     int               = null
	,@RecordsProcessed                int               = null
	,@CurrentProcessLabel             nvarchar(35)      = null
	,@IsFailed                        bit               = null
	,@IsFailureCleared                bit               = null
	,@CancellationRequestTime         datetimeoffset(7) = null
	,@IsCancelled                     bit               = null
	,@ResultMessage                   nvarchar(max)     = null
	,@TraceLog                        nvarchar(max)     = null
	,@UserDefinedColumns              xml               = null
	,@JobRunXID                       varchar(150)      = null
	,@LegacyKey                       nvarchar(50)      = null
	,@UpdateUser                      nvarchar(75)      = null -- set to current application user unless "SystemUser" passed
	,@RowStamp                        timestamp         = null -- row time stamp - pass for preemptive check for overwrites
	,@IsReselected                    tinyint           = 0    -- when 1 all columns in entity view are returned, 2 PK only, 0 none
	,@IsNullApplied                   bit               = 0    -- when 1 null parameters overwrite corresponding columns with null
	,@zContext                        xml               = null -- other values defining context for the update (if any)
	,@JobSCD                          varchar(132)      = null -- not a base table column
	,@JobLabel                        nvarchar(35)      = null -- not a base table column
	,@IsCancelEnabled                 bit               = null -- not a base table column
	,@IsParallelEnabled               bit               = null -- not a base table column
	,@IsFullTraceEnabled              bit               = null -- not a base table column
	,@IsAlertOnSuccessEnabled         bit               = null -- not a base table column
	,@JobScheduleSID                  int               = null -- not a base table column
	,@JobScheduleSequence             int               = null -- not a base table column
	,@IsRunAfterPredecessorsOnly      bit               = null -- not a base table column
	,@MaxErrorRate                    int               = null -- not a base table column
	,@MaxRetriesOnFailure             tinyint           = null -- not a base table column
	,@JobIsActive                     bit               = null -- not a base table column
	,@JobRowGUID                      uniqueidentifier  = null -- not a base table column
	,@IsDeleteEnabled                 bit               = null -- not a base table column
	,@JobStatusSCD                    varchar(35)       = null -- not a base table column
	,@JobStatusLabel                  nvarchar(35)      = null -- not a base table column
	,@RecordsPerMinute                int               = null -- not a base table column
	,@RecordsRemaining                int               = null -- not a base table column
	,@EstimatedMinutesRemaining       int               = null -- not a base table column
	,@EstimatedEndTime                datetime          = null -- not a base table column
	,@DurationMinutes                 int               = null -- not a base table column
	,@StartTimeClientTZ               datetime          = null -- not a base table column
	,@EndTimeClientTZ                 datetime          = null -- not a base table column
	,@CancellationRequestTimeClientTZ datetime          = null -- not a base table column
as
/*********************************************************************************************************************************
Procedure : sf.pJobRun#Update
Notice    : Copyright Â© 2019 Softworks Group Inc.
Summary   : updates 1 row in the sf.JobRun table
-----------------------------------------------------------------------------------------------------------------------------------
Author    : Generated by DB Studio: pSprocGen | Designer: Tim Edlund
Version   : March 2019
-----------------------------------------------------------------------------------------------------------------------------------
Comments
--------
This procedure is used to update the sf.JobRun table. The procedure requires a primary key to locate the record to update.
Additional parameters are provided for all columns in the vJobRun entity view, however, the base logic of the procedure
updates the columns of the table only. Table-specific logic can be added through tagged sections (pre and post update) and a call
to an extended procedure supports client-specific logic. Logic implemented within code tags (table-specific logic) is part of the
base product and applies to all client configurations. Calls to the extended procedure occur immediately after the table-specific
logic in both "pre-update" and "post-update" contexts.  A transaction is used to commit/rollback all changes as a logical unit.

Client specific customizations must be implemented in the ext.pJobRun procedure. The extended procedure is only called
where it exists in the DB. The first parameter passed @Mode is set to either "update.pre" or "update.post" to provide context for
the extended logic.

The @zContext parameter is an additional construct available to support overrides where different results are produced based on
content provided in the XML from the client tier. This parameter may contain multiple values.

The "@IsReselected" parameter controls output and "@IsNullApplied" controls whether or not parameters with null values overwrite
corresponding columns on the row.

For client-tier calls using the Microsoft Entity Framework and RIA Services, the @IsReselected bit should be passed as 1 to
force re-selection of table columns + extended view columns (the entity view).

Values for parameters representing mandatory columns must be provided unless @IsNullApplied is passed as 0. If @IsNullApplied = 1
any parameter with a null value overwrites the corresponding column value with null.  @IsNullApplied defaults to 0 but should be
passed as 1 when calling through the entity framework domain service since all columns are mapped to the procedure.

If the @UpdateUser parameter is passed as the special value "SystemUser", then the system user established in sf.ConfigParam
is applied. This option is useful for conversion and system generated updates the user would not recognize as having caused. Any
other value provided for the parameter (including null) is overwritten with the current application user.

The @RowStamp parameter should always be passed when calling from the user interface. The @RowStamp parameter is used to
preemptively check for an overwrite.  The value should be passed as the RowStamp value from the row when it was last
retrieved into the UI. If the RowStamp on the record changes from the value passed, this procedure will raise an exception and
avoid the overwrite.  For calls from back-end procedures, the @RowStamp parameter can be left blank and it will default to the
current time stamp on the record (avoiding the need to look up the value prior to calling.)

Business rule compliance is checked through a table constraint which calls fJobRunCheck to test all rules.

-------------------------------------------------------------------------------------------------------------------------------- */

begin
	set nocount on

	declare
		 @errorNo                                      int = 0								-- 0 no error, <50000 SQL error, else business rule
		,@tranCount                                    int = @@trancount			-- determines whether a wrapping transaction exists
		,@sprocName                                    nvarchar(128) = object_name(@@procid)						-- name of currently executing procedure
		,@xState                                       int										-- error state detected in catch block
		,@errorText                                    nvarchar(4000)					-- message text (for business rule errors)
		,@rowsAffected                                 int = 0								-- tracks rows impacted by the operation (error check)
		,@recordSID                                    int										-- tracks primary key value for clearing current default
		,@ON                                           bit = cast(1 as bit)		-- constant for bit comparison and assignments
		,@OFF                                          bit = cast(0 as bit)		-- constant for bit comparison and assignments

	begin try

		-- use a transaction so that any additional updates implemented through the extended
		-- procedure or through table-specific logic succeed or fail as a logical unit

		if @tranCount = 0																											-- no outer transaction
		begin
			begin transaction
		end
		else																																	-- outer transaction so create save point
		begin
			save transaction @sprocName
		end

		-- check parameters

		if @JobRunSID is null
		begin

			exec sf.pMessage#Get
				 @MessageSCD  	= 'BlankParameter'
				,@MessageText 	= @errorText output
				,@DefaultText 	= N'A parameter (%1) required by the database procedure was left blank.'
				,@Arg1					= '@JobRunSID'

			raiserror(@errorText, 18, 1)
		end

		-- remove leading and trailing spaces from character type columns

		set @CallSyntax = ltrim(rtrim(@CallSyntax))
		set @CurrentProcessLabel = ltrim(rtrim(@CurrentProcessLabel))
		set @ResultMessage = ltrim(rtrim(@ResultMessage))
		set @TraceLog = ltrim(rtrim(@TraceLog))
		set @JobRunXID = ltrim(rtrim(@JobRunXID))
		set @LegacyKey = ltrim(rtrim(@LegacyKey))
		set @UpdateUser = ltrim(rtrim(@UpdateUser))
		set @JobSCD = ltrim(rtrim(@JobSCD))
		set @JobLabel = ltrim(rtrim(@JobLabel))
		set @JobStatusSCD = ltrim(rtrim(@JobStatusSCD))
		set @JobStatusLabel = ltrim(rtrim(@JobStatusLabel))

		-- set zero length strings to null to avoid storing them in the record

		if len(@CallSyntax) = 0 set @CallSyntax = null
		if len(@CurrentProcessLabel) = 0 set @CurrentProcessLabel = null
		if len(@ResultMessage) = 0 set @ResultMessage = null
		if len(@TraceLog) = 0 set @TraceLog = null
		if len(@JobRunXID) = 0 set @JobRunXID = null
		if len(@LegacyKey) = 0 set @LegacyKey = null
		if len(@UpdateUser) = 0 set @UpdateUser = null
		if len(@JobSCD) = 0 set @JobSCD = null
		if len(@JobLabel) = 0 set @JobLabel = null
		if len(@JobStatusSCD) = 0 set @JobStatusSCD = null
		if len(@JobStatusLabel) = 0 set @JobStatusLabel = null

		-- set the ID of the user

		if isnull(@UpdateUser, 'x') = N'SystemUser' set @UpdateUser = left(sf.fConfigParam#Value('SystemUser'),75)-- override for "SystemUser"
		if isnull(@UpdateUser, 'x') <> N'SystemUser' set @UpdateUser = sf.fApplicationUserSession#UserName()			-- application user - or DB user if no application session set

		-- avoid overwriting with null parameter values (unless specified)
		-- by retrieving existing values from the entity row for blank parameters

		if @IsNullApplied = 0
		begin

			select
				 @JobSID                          = isnull(@JobSID,jr.JobSID)
				,@ConversationHandle              = isnull(@ConversationHandle,jr.ConversationHandle)
				,@CallSyntax                      = isnull(@CallSyntax,jr.CallSyntax)
				,@StartTime                       = isnull(@StartTime,jr.StartTime)
				,@EndTime                         = isnull(@EndTime,jr.EndTime)
				,@TotalRecords                    = isnull(@TotalRecords,jr.TotalRecords)
				,@TotalErrors                     = isnull(@TotalErrors,jr.TotalErrors)
				,@RecordsProcessed                = isnull(@RecordsProcessed,jr.RecordsProcessed)
				,@CurrentProcessLabel             = isnull(@CurrentProcessLabel,jr.CurrentProcessLabel)
				,@IsFailed                        = isnull(@IsFailed,jr.IsFailed)
				,@IsFailureCleared                = isnull(@IsFailureCleared,jr.IsFailureCleared)
				,@CancellationRequestTime         = isnull(@CancellationRequestTime,jr.CancellationRequestTime)
				,@IsCancelled                     = isnull(@IsCancelled,jr.IsCancelled)
				,@ResultMessage                   = isnull(@ResultMessage,jr.ResultMessage)
				,@TraceLog                        = isnull(@TraceLog,jr.TraceLog)
				,@UserDefinedColumns              = isnull(@UserDefinedColumns,jr.UserDefinedColumns)
				,@JobRunXID                       = isnull(@JobRunXID,jr.JobRunXID)
				,@LegacyKey                       = isnull(@LegacyKey,jr.LegacyKey)
				,@UpdateUser                      = isnull(@UpdateUser,jr.UpdateUser)
				,@IsReselected                    = isnull(@IsReselected,jr.IsReselected)
				,@IsNullApplied                   = isnull(@IsNullApplied,jr.IsNullApplied)
				,@zContext                        = isnull(@zContext,jr.zContext)
				,@JobSCD                          = isnull(@JobSCD,jr.JobSCD)
				,@JobLabel                        = isnull(@JobLabel,jr.JobLabel)
				,@IsCancelEnabled                 = isnull(@IsCancelEnabled,jr.IsCancelEnabled)
				,@IsParallelEnabled               = isnull(@IsParallelEnabled,jr.IsParallelEnabled)
				,@IsFullTraceEnabled              = isnull(@IsFullTraceEnabled,jr.IsFullTraceEnabled)
				,@IsAlertOnSuccessEnabled         = isnull(@IsAlertOnSuccessEnabled,jr.IsAlertOnSuccessEnabled)
				,@JobScheduleSID                  = isnull(@JobScheduleSID,jr.JobScheduleSID)
				,@JobScheduleSequence             = isnull(@JobScheduleSequence,jr.JobScheduleSequence)
				,@IsRunAfterPredecessorsOnly      = isnull(@IsRunAfterPredecessorsOnly,jr.IsRunAfterPredecessorsOnly)
				,@MaxErrorRate                    = isnull(@MaxErrorRate,jr.MaxErrorRate)
				,@MaxRetriesOnFailure             = isnull(@MaxRetriesOnFailure,jr.MaxRetriesOnFailure)
				,@JobIsActive                     = isnull(@JobIsActive,jr.JobIsActive)
				,@JobRowGUID                      = isnull(@JobRowGUID,jr.JobRowGUID)
				,@IsDeleteEnabled                 = isnull(@IsDeleteEnabled,jr.IsDeleteEnabled)
				,@JobStatusSCD                    = isnull(@JobStatusSCD,jr.JobStatusSCD)
				,@JobStatusLabel                  = isnull(@JobStatusLabel,jr.JobStatusLabel)
				,@RecordsPerMinute                = isnull(@RecordsPerMinute,jr.RecordsPerMinute)
				,@RecordsRemaining                = isnull(@RecordsRemaining,jr.RecordsRemaining)
				,@EstimatedMinutesRemaining       = isnull(@EstimatedMinutesRemaining,jr.EstimatedMinutesRemaining)
				,@EstimatedEndTime                = isnull(@EstimatedEndTime,jr.EstimatedEndTime)
				,@DurationMinutes                 = isnull(@DurationMinutes,jr.DurationMinutes)
				,@StartTimeClientTZ               = isnull(@StartTimeClientTZ,jr.StartTimeClientTZ)
				,@EndTimeClientTZ                 = isnull(@EndTimeClientTZ,jr.EndTimeClientTZ)
				,@CancellationRequestTimeClientTZ = isnull(@CancellationRequestTimeClientTZ,jr.CancellationRequestTimeClientTZ)
			from
				sf.vJobRun jr
			where
				jr.JobRunSID = @JobRunSID

		end
		
		-- look up the FK value matching the system code if set; this allows
		-- FK values value to be set/updated based on system code values
		
		if @JobSCD is not null and @JobSID = (select x.JobSID from sf.JobRun x where x.JobRunSID = @JobRunSID)
		begin
		
			select
				@JobSID = x.JobSID
			from
				sf.Job x
			where
				x.JobSCD = @JobSCD
		
		end

		-- block changing FK values to parent records which are inactive (UI should prevent this)
		
		if (select x.JobSID from sf.JobRun x where x.JobRunSID = @JobRunSID) <> @JobSID
		begin
			if (select x.IsActive from sf.Job x where x.JobSID = @JobSID) = @OFF
			begin
				
				exec sf.pMessage#Get
					 @MessageSCD  = 'AssignmentToInactiveParent'
					,@MessageText = @errorText output
					,@DefaultText = N'The %1 assigned is marked inactive. Leave the record unchanged or set to an active %1.'
					,@Arg1        = N'job'
				
				raiserror(@errorText, 16, 1)
				
			end
		end

		-- apply the table-specific pre-update logic (if any)

		--! <PreUpdate>
		-- Tim Edlund | Jun 2013
		-- If the job is being marked as failed or cancelled and no ending time is provided, default it
		-- to the system date time.  Do the same if a result message is being provided.

		if @IsFailed		= cast(1 as bit)	and @EndTime is null set @EndTime = sysdatetimeoffset()
		if @IsCancelled = cast(1 as bit)	and @EndTime is null set @EndTime = sysdatetimeoffset()
		if @ResultMessage is not null			and @EndTime is null set @EndTime = sysdatetimeoffset()

		-- Tim Edlund | Jun 2013
		-- If an ending time is provided, automatically set the Progress Message to null
		-- since processing is complete.

		if @EndTime is not null and @CurrentProcessLabel is not null set @CurrentProcessLabel = null

		-- Tim Edlund | Jun 2013
		-- If the job is being cancelled and a result message has not been provided, set a default
		-- for it.  The UI design should prompt the user for a reason why they are cancelling, however
		-- the value may not be mandatory.

		if @ResultMessage is null and @IsCancelled = cast(1 as bit)
		begin

			exec sf.pMessage#Get
				 @MessageSCD  	= 'JobCancelled'
				,@MessageText 	= @errorText output
				,@DefaultText 	= N'The job was cancelled by user request (%1).'
				,@Arg1					= @UpdateUser	

			set @ResultMessage = cast(@errorText as nvarchar(max))

		end

		-- Tim Edlund | Jun 2013
		-- If a cancellation request is pending but the job is being marked failed, then the end user
		-- is forcing the job to fail from the UI because the job is non-responsive. Set the
		-- result message to the default.  UI's will typically not prompt for a reason in this
		-- scenario.

		-- Kris Dawson | Jul 2013
		-- Update to append the error text to the result message to ensure the message is preserved

		declare @waitTime int

		if @CancellationRequestTime is not null and @IsFailed = cast(1 as bit)
		begin

			-- calculate the time since the request was made but check to ensure
			-- the result will not exceed the INT limit - so treat 60 as maximum

			if datediff(minute, @CancellationRequestTime, sysdatetimeoffset()) > 60
			begin
				set @waitTime = 60
			end
			else
			begin
				set @waitTime = datediff(minute, @CancellationRequestTime, sysdatetimeoffset())
			end

			exec sf.pMessage#Get
				 @MessageSCD  	= 'JobCancellationFailed'
				,@MessageText 	= @errorText output
				,@DefaultText 	= N'The attempt to cancel the job failed. The job did not respond to the request to cancel within %1 minutes. The job status was set to FAILED by %2.'
				,@Arg1					= @waitTime
				,@Arg2					= @UpdateUser
			
			if @ResultMessage is not null
			begin
				set @ResultMessage = @ResultMessage + char(13) + char(10) + char(13) + char(10)
			end

			set @ResultMessage = isnull(@ResultMessage, '') + cast(@errorText as nvarchar(max))

		end

		--! </PreUpdate>

		-- update the record

		update
			sf.JobRun
		set
			 JobSID = @JobSID
			,ConversationHandle = @ConversationHandle
			,CallSyntax = @CallSyntax
			,StartTime = @StartTime
			,EndTime = @EndTime
			,TotalRecords = @TotalRecords
			,TotalErrors = @TotalErrors
			,RecordsProcessed = @RecordsProcessed
			,CurrentProcessLabel = @CurrentProcessLabel
			,IsFailed = @IsFailed
			,IsFailureCleared = @IsFailureCleared
			,CancellationRequestTime = @CancellationRequestTime
			,IsCancelled = @IsCancelled
			,ResultMessage = @ResultMessage
			,TraceLog = @TraceLog
			,UserDefinedColumns = @UserDefinedColumns
			,JobRunXID = @JobRunXID
			,LegacyKey = @LegacyKey
			,UpdateUser = @UpdateUser
			,UpdateTime = sysdatetimeoffset()
		where
			JobRunSID = @JobRunSID
			and
			RowStamp = isnull(@RowStamp, RowStamp)

		set @rowsAffected = @@rowcount

		-- check for errors

		if @rowsAffected = 0
		begin
			
			if exists (select 1 from sf.JobRun where JobRunSID = @jobRunSID)
			begin
				
				exec sf.pMessage#Get
					 @MessageSCD  = 'UpdateBlocked'
					,@MessageText = @errorText output
					,@DefaultText = N'A change was made to the "%1" record since it was last retrieved. The overwrite was avoided. Refresh the record and try again.'
					,@Arg1        = 'sf.JobRun'
				
				raiserror(@errorText, 16, 1)
			end
			else
			begin
				
				exec sf.pMessage#Get
					 @MessageSCD  = 'RecordNotFound'
					,@MessageText = @errorText output
					,@DefaultText = N'The %1 record was not found. Record ID = "%2". The record may have been deleted or the identifier is invalid.'
					,@Arg1        = 'sf.JobRun'
					,@Arg2        = @jobRunSID
				
				raiserror(@errorText, 18, 1)
			end

		end
		else if @rowsAffected <> 1
		begin

			exec sf.pMessage#Get
				 @MessageSCD  = 'RowCountUnexpected'
				,@MessageText = @errorText output
				,@DefaultText = N'The %1 operation on table "%2" affected an unexpected number of rows (%3). Record ID = %4.'
				,@Arg1        = 'update'
				,@Arg2        = 'sf.JobRun'
				,@Arg3        = @rowsAffected
				,@Arg4        = @jobRunSID
			
			raiserror(@errorText, 18, 1)
		end

		-- apply the table-specific post-update logic (if any)

		--! <PostUpdate>
		--  insert post-update logic here ...
		--! </PostUpdate>

		if @trancount = 0 and xact_state() = 1 commit transaction

		-- return all columns for entity (1), just the PK value (2), or no returned value (0)

		if @IsReselected = 2
		begin

			select
				 ent.JobRunSID
			from
				sf.vJobRun ent
			where
				ent.JobRunSID = @JobRunSID

		end
		else if @IsReselected = 1
		begin

			select
				 ent.JobRunSID
				,ent.JobSID
				,ent.ConversationHandle
				,ent.CallSyntax
				,ent.StartTime
				,ent.EndTime
				,ent.TotalRecords
				,ent.TotalErrors
				,ent.RecordsProcessed
				,ent.CurrentProcessLabel
				,ent.IsFailed
				,ent.IsFailureCleared
				,ent.CancellationRequestTime
				,ent.IsCancelled
				,ent.ResultMessage
				,ent.TraceLog
				,ent.UserDefinedColumns
				,ent.JobRunXID
				,ent.LegacyKey
				,ent.IsDeleted
				,ent.CreateUser
				,ent.CreateTime
				,ent.UpdateUser
				,ent.UpdateTime
				,ent.RowGUID
				,ent.RowStamp
				,ent.JobSCD
				,ent.JobLabel
				,ent.IsCancelEnabled
				,ent.IsParallelEnabled
				,ent.IsFullTraceEnabled
				,ent.IsAlertOnSuccessEnabled
				,ent.JobScheduleSID
				,ent.JobScheduleSequence
				,ent.IsRunAfterPredecessorsOnly
				,ent.MaxErrorRate
				,ent.MaxRetriesOnFailure
				,ent.JobIsActive
				,ent.JobRowGUID
				,ent.IsDeleteEnabled
				,ent.IsReselected
				,ent.IsNullApplied
				,ent.zContext
				,ent.JobStatusSCD
				,ent.JobStatusLabel
				,ent.RecordsPerMinute
				,ent.RecordsRemaining
				,ent.EstimatedMinutesRemaining
				,ent.EstimatedEndTime
				,ent.DurationMinutes
				,ent.StartTimeClientTZ
				,ent.EndTimeClientTZ
				,ent.CancellationRequestTimeClientTZ
			from
				sf.vJobRun ent
			where
				ent.JobRunSID = @JobRunSID

		end

	end try

	begin catch
		set @xState = xact_state()
		
		if @tranCount > 0 and @xState = 1
		begin
			rollback transaction @sprocName																			-- committable wrapping trx exists: rollback to savepoint
		end
		else if @xState <> 0																									-- full rollback
		begin
			rollback
		end
		
		exec @errorNo = sf.pErrorRethrow																			-- process message text and re-throw the error
	end catch

	return(@errorNo)

end
GO
