SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pPersonMailingAddress#Update]
	 @PersonMailingAddressSID   int               = null -- required! id of row to update - must be set in custom logic if not passed
	,@PersonSID                 int               = null -- table column values to update:
	,@StreetAddress1            nvarchar(75)      = null
	,@StreetAddress2            nvarchar(75)      = null
	,@StreetAddress3            nvarchar(75)      = null
	,@CitySID                   int               = null
	,@PostalCode                varchar(10)       = null
	,@RegionSID                 int               = null
	,@EffectiveTime             datetime          = null
	,@IsAdminReviewRequired     bit               = null
	,@LastVerifiedTime          datetimeoffset(7) = null
	,@ChangeLog                 xml               = null
	,@UserDefinedColumns        xml               = null
	,@PersonMailingAddressXID   varchar(150)      = null
	,@LegacyKey                 nvarchar(50)      = null
	,@UpdateUser                nvarchar(75)      = null -- set to current application user unless "SystemUser" passed
	,@RowStamp                  timestamp         = null -- row time stamp - pass for preemptive check for overwrites
	,@IsReselected              tinyint           = 0    -- when 1 all columns in entity view are returned, 2 PK only, 0 none
	,@IsNullApplied             bit               = 0    -- when 1 null parameters overwrite corresponding columns with null
	,@zContext                  xml               = null -- other values defining context for the update (if any)
	,@CityName                  nvarchar(30)      = null -- not a base table column
	,@StateProvinceSID          int               = null -- not a base table column
	,@CityIsDefault             bit               = null -- not a base table column
	,@CityIsActive              bit               = null -- not a base table column
	,@CityIsAdminReviewRequired bit               = null -- not a base table column
	,@CityRowGUID               uniqueidentifier  = null -- not a base table column
	,@RegionLabel               nvarchar(35)      = null -- not a base table column
	,@RegionName                nvarchar(50)      = null -- not a base table column
	,@RegionIsDefault           bit               = null -- not a base table column
	,@RegionIsActive            bit               = null -- not a base table column
	,@RegionRowGUID             uniqueidentifier  = null -- not a base table column
	,@GenderSID                 int               = null -- not a base table column
	,@NamePrefixSID             int               = null -- not a base table column
	,@FirstName                 nvarchar(30)      = null -- not a base table column
	,@CommonName                nvarchar(30)      = null -- not a base table column
	,@MiddleNames               nvarchar(30)      = null -- not a base table column
	,@LastName                  nvarchar(35)      = null -- not a base table column
	,@BirthDate                 date              = null -- not a base table column
	,@DeathDate                 date              = null -- not a base table column
	,@HomePhone                 varchar(25)       = null -- not a base table column
	,@MobilePhone               varchar(25)       = null -- not a base table column
	,@IsTextMessagingEnabled    bit               = null -- not a base table column
	,@ImportBatch               nvarchar(100)     = null -- not a base table column
	,@PersonRowGUID             uniqueidentifier  = null -- not a base table column
	,@IsDeleteEnabled           bit               = null -- not a base table column
	,@HtmlAddress               nvarchar(512)     = null -- not a base table column
	,@StateProvinceCode         nvarchar(5)       = null -- not a base table column
	,@StateProvinceName         nvarchar(30)      = null -- not a base table column
	,@ISOA3                     char(3)           = null -- not a base table column
	,@CountryName               nvarchar(50)      = null -- not a base table column
	,@IsCurrentAddress          bit               = null -- not a base table column
	,@CountrySID                int               = null -- not a base table column
as
/*********************************************************************************************************************************
Procedure : dbo.pPersonMailingAddress#Update
Notice    : Copyright Â© 2019 Softworks Group Inc.
Summary   : updates 1 row in the dbo.PersonMailingAddress table
-----------------------------------------------------------------------------------------------------------------------------------
Author    : Generated by DB Studio: pSprocGen | Designer: Tim Edlund
Version   : April 2019
-----------------------------------------------------------------------------------------------------------------------------------
Comments
--------
This procedure is used to update the dbo.PersonMailingAddress table. The procedure requires a primary key to locate the record to update.
Additional parameters are provided for all columns in the vPersonMailingAddress entity view, however, the base logic of the procedure
updates the columns of the table only. Table-specific logic can be added through tagged sections (pre and post update) and a call
to an extended procedure supports client-specific logic. Logic implemented within code tags (table-specific logic) is part of the
base product and applies to all client configurations. Calls to the extended procedure occur immediately after the table-specific
logic in both "pre-update" and "post-update" contexts.  A transaction is used to commit/rollback all changes as a logical unit.

Client specific customizations must be implemented in the ext.pPersonMailingAddress procedure. The extended procedure is only called
where it exists in the DB. The first parameter passed @Mode is set to either "update.pre" or "update.post" to provide context for
the extended logic.

The @zContext parameter is an additional construct available to support overrides where different results are produced based on
content provided in the XML from the client tier. This parameter may contain multiple values.

The "@IsReselected" parameter controls output and "@IsNullApplied" controls whether or not parameters with null values overwrite
corresponding columns on the row.

For client-tier calls using the Microsoft Entity Framework and RIA Services, the @IsReselected bit should be passed as 1 to
force re-selection of table columns + extended view columns (the entity view).

Values for parameters representing mandatory columns must be provided unless @IsNullApplied is passed as 0. If @IsNullApplied = 1
any parameter with a null value overwrites the corresponding column value with null.  @IsNullApplied defaults to 0 but should be
passed as 1 when calling through the entity framework domain service since all columns are mapped to the procedure.

If the @UpdateUser parameter is passed as the special value "SystemUser", then the system user established in sf.ConfigParam
is applied. This option is useful for conversion and system generated updates the user would not recognize as having caused. Any
other value provided for the parameter (including null) is overwritten with the current application user.

The @RowStamp parameter should always be passed when calling from the user interface. The @RowStamp parameter is used to
preemptively check for an overwrite.  The value should be passed as the RowStamp value from the row when it was last
retrieved into the UI. If the RowStamp on the record changes from the value passed, this procedure will raise an exception and
avoid the overwrite.  For calls from back-end procedures, the @RowStamp parameter can be left blank and it will default to the
current time stamp on the record (avoiding the need to look up the value prior to calling.)

Business rule compliance is checked through a table constraint which calls fPersonMailingAddressCheck to test all rules.

-------------------------------------------------------------------------------------------------------------------------------- */

begin
	set nocount on

	declare
		 @errorNo                                      int = 0								-- 0 no error, <50000 SQL error, else business rule
		,@tranCount                                    int = @@trancount			-- determines whether a wrapping transaction exists
		,@sprocName                                    nvarchar(128) = object_name(@@procid)						-- name of currently executing procedure
		,@xState                                       int										-- error state detected in catch block
		,@errorText                                    nvarchar(4000)					-- message text (for business rule errors)
		,@rowsAffected                                 int = 0								-- tracks rows impacted by the operation (error check)
		,@recordSID                                    int										-- tracks primary key value for clearing current default
		,@ON                                           bit = cast(1 as bit)		-- constant for bit comparison and assignments
		,@OFF                                          bit = cast(0 as bit)		-- constant for bit comparison and assignments

	begin try

		-- use a transaction so that any additional updates implemented through the extended
		-- procedure or through table-specific logic succeed or fail as a logical unit

		if @tranCount = 0																											-- no outer transaction
		begin
			begin transaction
		end
		else																																	-- outer transaction so create save point
		begin
			save transaction @sprocName
		end

		-- check parameters

		if @PersonMailingAddressSID is null
		begin

			exec sf.pMessage#Get
				 @MessageSCD  	= 'BlankParameter'
				,@MessageText 	= @errorText output
				,@DefaultText 	= N'A parameter (%1) required by the database procedure was left blank.'
				,@Arg1					= '@PersonMailingAddressSID'

			raiserror(@errorText, 18, 1)
		end

		-- remove leading and trailing spaces from character type columns

		set @StreetAddress1 = ltrim(rtrim(@StreetAddress1))
		set @StreetAddress2 = ltrim(rtrim(@StreetAddress2))
		set @StreetAddress3 = ltrim(rtrim(@StreetAddress3))
		set @PostalCode = ltrim(rtrim(@PostalCode))
		set @PersonMailingAddressXID = ltrim(rtrim(@PersonMailingAddressXID))
		set @LegacyKey = ltrim(rtrim(@LegacyKey))
		set @UpdateUser = ltrim(rtrim(@UpdateUser))
		set @CityName = ltrim(rtrim(@CityName))
		set @RegionLabel = ltrim(rtrim(@RegionLabel))
		set @RegionName = ltrim(rtrim(@RegionName))
		set @FirstName = ltrim(rtrim(@FirstName))
		set @CommonName = ltrim(rtrim(@CommonName))
		set @MiddleNames = ltrim(rtrim(@MiddleNames))
		set @LastName = ltrim(rtrim(@LastName))
		set @HomePhone = ltrim(rtrim(@HomePhone))
		set @MobilePhone = ltrim(rtrim(@MobilePhone))
		set @ImportBatch = ltrim(rtrim(@ImportBatch))
		set @HtmlAddress = ltrim(rtrim(@HtmlAddress))
		set @StateProvinceCode = ltrim(rtrim(@StateProvinceCode))
		set @StateProvinceName = ltrim(rtrim(@StateProvinceName))
		set @ISOA3 = ltrim(rtrim(@ISOA3))
		set @CountryName = ltrim(rtrim(@CountryName))

		-- set zero length strings to null to avoid storing them in the record

		if len(@StreetAddress1) = 0 set @StreetAddress1 = null
		if len(@StreetAddress2) = 0 set @StreetAddress2 = null
		if len(@StreetAddress3) = 0 set @StreetAddress3 = null
		if len(@PostalCode) = 0 set @PostalCode = null
		if len(@PersonMailingAddressXID) = 0 set @PersonMailingAddressXID = null
		if len(@LegacyKey) = 0 set @LegacyKey = null
		if len(@UpdateUser) = 0 set @UpdateUser = null
		if len(@CityName) = 0 set @CityName = null
		if len(@RegionLabel) = 0 set @RegionLabel = null
		if len(@RegionName) = 0 set @RegionName = null
		if len(@FirstName) = 0 set @FirstName = null
		if len(@CommonName) = 0 set @CommonName = null
		if len(@MiddleNames) = 0 set @MiddleNames = null
		if len(@LastName) = 0 set @LastName = null
		if len(@HomePhone) = 0 set @HomePhone = null
		if len(@MobilePhone) = 0 set @MobilePhone = null
		if len(@ImportBatch) = 0 set @ImportBatch = null
		if len(@HtmlAddress) = 0 set @HtmlAddress = null
		if len(@StateProvinceCode) = 0 set @StateProvinceCode = null
		if len(@StateProvinceName) = 0 set @StateProvinceName = null
		if len(@ISOA3) = 0 set @ISOA3 = null
		if len(@CountryName) = 0 set @CountryName = null
		
		if @EffectiveTime is not null	set @EffectiveTime = cast(cast(@EffectiveTime as date) as datetime)						-- ensure Effective value has start-of-day time component

		-- set the ID of the user

		if isnull(@UpdateUser, 'x') = N'SystemUser' set @UpdateUser = left(sf.fConfigParam#Value('SystemUser'),75)-- override for "SystemUser"
		if isnull(@UpdateUser, 'x') <> N'SystemUser' set @UpdateUser = sf.fApplicationUserSession#UserName()			-- application user - or DB user if no application session set

		-- avoid overwriting with null parameter values (unless specified)
		-- by retrieving existing values from the entity row for blank parameters

		if @IsNullApplied = 0
		begin

			select
				 @PersonSID                 = isnull(@PersonSID,pma.PersonSID)
				,@StreetAddress1            = isnull(@StreetAddress1,pma.StreetAddress1)
				,@StreetAddress2            = isnull(@StreetAddress2,pma.StreetAddress2)
				,@StreetAddress3            = isnull(@StreetAddress3,pma.StreetAddress3)
				,@CitySID                   = isnull(@CitySID,pma.CitySID)
				,@PostalCode                = isnull(@PostalCode,pma.PostalCode)
				,@RegionSID                 = isnull(@RegionSID,pma.RegionSID)
				,@EffectiveTime             = isnull(@EffectiveTime,pma.EffectiveTime)
				,@IsAdminReviewRequired     = isnull(@IsAdminReviewRequired,pma.IsAdminReviewRequired)
				,@LastVerifiedTime          = isnull(@LastVerifiedTime,pma.LastVerifiedTime)
				,@ChangeLog                 = isnull(@ChangeLog,pma.ChangeLog)
				,@UserDefinedColumns        = isnull(@UserDefinedColumns,pma.UserDefinedColumns)
				,@PersonMailingAddressXID   = isnull(@PersonMailingAddressXID,pma.PersonMailingAddressXID)
				,@LegacyKey                 = isnull(@LegacyKey,pma.LegacyKey)
				,@UpdateUser                = isnull(@UpdateUser,pma.UpdateUser)
				,@IsReselected              = isnull(@IsReselected,pma.IsReselected)
				,@IsNullApplied             = isnull(@IsNullApplied,pma.IsNullApplied)
				,@zContext                  = isnull(@zContext,pma.zContext)
				,@CityName                  = isnull(@CityName,pma.CityName)
				,@StateProvinceSID          = isnull(@StateProvinceSID,pma.StateProvinceSID)
				,@CityIsDefault             = isnull(@CityIsDefault,pma.CityIsDefault)
				,@CityIsActive              = isnull(@CityIsActive,pma.CityIsActive)
				,@CityIsAdminReviewRequired = isnull(@CityIsAdminReviewRequired,pma.CityIsAdminReviewRequired)
				,@CityRowGUID               = isnull(@CityRowGUID,pma.CityRowGUID)
				,@RegionLabel               = isnull(@RegionLabel,pma.RegionLabel)
				,@RegionName                = isnull(@RegionName,pma.RegionName)
				,@RegionIsDefault           = isnull(@RegionIsDefault,pma.RegionIsDefault)
				,@RegionIsActive            = isnull(@RegionIsActive,pma.RegionIsActive)
				,@RegionRowGUID             = isnull(@RegionRowGUID,pma.RegionRowGUID)
				,@GenderSID                 = isnull(@GenderSID,pma.GenderSID)
				,@NamePrefixSID             = isnull(@NamePrefixSID,pma.NamePrefixSID)
				,@FirstName                 = isnull(@FirstName,pma.FirstName)
				,@CommonName                = isnull(@CommonName,pma.CommonName)
				,@MiddleNames               = isnull(@MiddleNames,pma.MiddleNames)
				,@LastName                  = isnull(@LastName,pma.LastName)
				,@BirthDate                 = isnull(@BirthDate,pma.BirthDate)
				,@DeathDate                 = isnull(@DeathDate,pma.DeathDate)
				,@HomePhone                 = isnull(@HomePhone,pma.HomePhone)
				,@MobilePhone               = isnull(@MobilePhone,pma.MobilePhone)
				,@IsTextMessagingEnabled    = isnull(@IsTextMessagingEnabled,pma.IsTextMessagingEnabled)
				,@ImportBatch               = isnull(@ImportBatch,pma.ImportBatch)
				,@PersonRowGUID             = isnull(@PersonRowGUID,pma.PersonRowGUID)
				,@IsDeleteEnabled           = isnull(@IsDeleteEnabled,pma.IsDeleteEnabled)
				,@HtmlAddress               = isnull(@HtmlAddress,pma.HtmlAddress)
				,@StateProvinceCode         = isnull(@StateProvinceCode,pma.StateProvinceCode)
				,@StateProvinceName         = isnull(@StateProvinceName,pma.StateProvinceName)
				,@ISOA3                     = isnull(@ISOA3,pma.ISOA3)
				,@CountryName               = isnull(@CountryName,pma.CountryName)
				,@IsCurrentAddress          = isnull(@IsCurrentAddress,pma.IsCurrentAddress)
				,@CountrySID                = isnull(@CountrySID,pma.CountrySID)
			from
				dbo.vPersonMailingAddress pma
			where
				pma.PersonMailingAddressSID = @PersonMailingAddressSID

		end
		
		set @PostalCode = sf.fFormatPostalCode(@PostalCode)										-- format postal codes to standard

		-- block changing FK values to parent records which are inactive (UI should prevent this)
		
		if (select x.CitySID from dbo.PersonMailingAddress x where x.PersonMailingAddressSID = @PersonMailingAddressSID) <> @CitySID
		begin
			if (select x.IsActive from dbo.City x where x.CitySID = @CitySID) = @OFF
			begin
				
				exec sf.pMessage#Get
					 @MessageSCD  = 'AssignmentToInactiveParent'
					,@MessageText = @errorText output
					,@DefaultText = N'The %1 assigned is marked inactive. Leave the record unchanged or set to an active %1.'
					,@Arg1        = N'city'
				
				raiserror(@errorText, 16, 1)
				
			end
		end
		
		if (select x.RegionSID from dbo.PersonMailingAddress x where x.PersonMailingAddressSID = @PersonMailingAddressSID) <> @RegionSID
		begin
			if (select x.IsActive from dbo.Region x where x.RegionSID = @RegionSID) = @OFF
			begin
				
				exec sf.pMessage#Get
					 @MessageSCD  = 'AssignmentToInactiveParent'
					,@MessageText = @errorText output
					,@DefaultText = N'The %1 assigned is marked inactive. Leave the record unchanged or set to an active %1.'
					,@Arg1        = N'region'
				
				raiserror(@errorText, 16, 1)
				
			end
		end

		-- apply the table-specific pre-update logic (if any)

		--! <PreUpdate>
		-- Tim Edlund | Feb 2018
		-- Ensure the effective times for these records are set
		-- to the beginning of the day only. (Overwrites default
		-- code above.)

		set @EffectiveTime = cast((convert(varchar(8), @EffectiveTime, 112)) + ' 00:00:00.00' as datetime);

		-- Tim Edlund | Jul 2017
		-- Shuffle address lines up if a blank appears in an earlier line

		if @StreetAddress2 is not null and @StreetAddress1 is null
		begin
			set @StreetAddress1 = @StreetAddress2
			set @StreetAddress2 = null
		end

		if @StreetAddress3 is not null and @StreetAddress2 is null
		begin
			set @StreetAddress2 = @StreetAddress3
			set @StreetAddress3 = null
		end

		if @StreetAddress3 is not null and @StreetAddress1 is null
		begin
			set @StreetAddress1 = @StreetAddress3
			set @StreetAddress3 = null
		end

		-- Tim Edlund | Jan 2017
		-- If the Region Mapping table is populated, lookup the Region key
		-- to assign based on the postal code. If a match is not found,  the
		-- previous value remains assigned unless null.
		
		if @PostalCode is not null
		begin
		
			if exists (select 1 from dbo.RegionMapping)
			begin

				select top(1)
					@recordSID = rm.RegionSID
				from
					dbo.RegionMapping rm
				where
					@PostalCode like rm.PostalCodeMask +'%'
				order by
					len(rm.PostalCodeMask) desc																			-- take the key of the longest (most granular) code that matches!

				if @recordSID is not null set @RegionSID = @recordSID

			end
			else if @RegionSID is null																					-- if the key was reset to NULL, set it to the default where defined
			begin
				select @RegionSID = x.RegionSID from dbo.Region x where x.IsDefault = @ON
			end

		end

		-- Tim Edlund | Sep 2017
		-- If the bit recording the need for admin verification is being turned off,
		-- then update the verification time.  Similarly, if the verification time
		-- is changing, turn off the bit if ON.

		if @IsAdminReviewRequired = @OFF and (select pma.IsAdminReviewRequired from dbo.PersonMailingAddress pma where pma.PersonMailingAddressSID = @PersonMailingAddressSID) = @ON
		begin
			set @LastVerifiedTime = sysdatetimeoffset()
		end
		else if @IsAdminReviewRequired = @ON and (select pma.LastVerifiedTime from dbo.PersonMailingAddress pma where pma.PersonMailingAddressSID = @PersonMailingAddressSID) < @LastVerifiedTime
		begin
			set @IsAdminReviewRequired = @OFF
		end

		-- Tim Edlund | Sep 2017
		-- If the update is being done by a non-administrator, and the
		-- address was changed, turn on the bit indicating admin review
		-- is required

		if sf.fIsGrantedToUserName('ADMIN.BASE', @UpdateUser) = @OFF
		begin

			set @recordSID = null

			select
				@recordSID = checksum(pma.StreetAddress1, pma.StreetAddress2, pma.StreetAddress3, pma.CitySID, pma.PostalCode)
			from
				dbo.PersonMailingAddress pma
			where
				pma.PersonMailingAddressSID = @PersonMailingAddressSID

			if checksum(@StreetAddress1, @StreetAddress2, @StreetAddress3, @CitySID, @PostalCode) <> @recordSID
			begin
				set @IsAdminReviewRequired = @ON;
			end;
		end;

		--! </PreUpdate>
	
		-- call the extended version of the procedure (if it exists) for "update.pre" mode
		
		if exists
		(
			select
				1
			from
				sf.vRoutine r
			where
				r.SchemaName = 'ext'
			and
				r.RoutineName = 'pPersonMailingAddress'
		)
		begin
		
			exec @errorNo = ext.pPersonMailingAddress
				 @Mode                      = 'update.pre'
				,@PersonMailingAddressSID   = @PersonMailingAddressSID
				,@PersonSID                 = @PersonSID output
				,@StreetAddress1            = @StreetAddress1 output
				,@StreetAddress2            = @StreetAddress2 output
				,@StreetAddress3            = @StreetAddress3 output
				,@CitySID                   = @CitySID output
				,@PostalCode                = @PostalCode output
				,@RegionSID                 = @RegionSID output
				,@EffectiveTime             = @EffectiveTime output
				,@IsAdminReviewRequired     = @IsAdminReviewRequired output
				,@LastVerifiedTime          = @LastVerifiedTime output
				,@ChangeLog                 = @ChangeLog output
				,@UserDefinedColumns        = @UserDefinedColumns output
				,@PersonMailingAddressXID   = @PersonMailingAddressXID output
				,@LegacyKey                 = @LegacyKey output
				,@UpdateUser                = @UpdateUser
				,@RowStamp                  = @RowStamp
				,@IsReselected              = @IsReselected
				,@IsNullApplied             = @IsNullApplied
				,@zContext                  = @zContext
				,@CityName                  = @CityName
				,@StateProvinceSID          = @StateProvinceSID
				,@CityIsDefault             = @CityIsDefault
				,@CityIsActive              = @CityIsActive
				,@CityIsAdminReviewRequired = @CityIsAdminReviewRequired
				,@CityRowGUID               = @CityRowGUID
				,@RegionLabel               = @RegionLabel
				,@RegionName                = @RegionName
				,@RegionIsDefault           = @RegionIsDefault
				,@RegionIsActive            = @RegionIsActive
				,@RegionRowGUID             = @RegionRowGUID
				,@GenderSID                 = @GenderSID
				,@NamePrefixSID             = @NamePrefixSID
				,@FirstName                 = @FirstName
				,@CommonName                = @CommonName
				,@MiddleNames               = @MiddleNames
				,@LastName                  = @LastName
				,@BirthDate                 = @BirthDate
				,@DeathDate                 = @DeathDate
				,@HomePhone                 = @HomePhone
				,@MobilePhone               = @MobilePhone
				,@IsTextMessagingEnabled    = @IsTextMessagingEnabled
				,@ImportBatch               = @ImportBatch
				,@PersonRowGUID             = @PersonRowGUID
				,@IsDeleteEnabled           = @IsDeleteEnabled
				,@HtmlAddress               = @HtmlAddress
				,@StateProvinceCode         = @StateProvinceCode
				,@StateProvinceName         = @StateProvinceName
				,@ISOA3                     = @ISOA3
				,@CountryName               = @CountryName
				,@IsCurrentAddress          = @IsCurrentAddress
				,@CountrySID                = @CountrySID
		
		end

		-- update the record

		update
			dbo.PersonMailingAddress
		set
			 PersonSID = @PersonSID
			,StreetAddress1 = @StreetAddress1
			,StreetAddress2 = @StreetAddress2
			,StreetAddress3 = @StreetAddress3
			,CitySID = @CitySID
			,PostalCode = @PostalCode
			,RegionSID = @RegionSID
			,EffectiveTime = @EffectiveTime
			,IsAdminReviewRequired = @IsAdminReviewRequired
			,LastVerifiedTime = @LastVerifiedTime
			,ChangeLog = @ChangeLog
			,UserDefinedColumns = @UserDefinedColumns
			,PersonMailingAddressXID = @PersonMailingAddressXID
			,LegacyKey = @LegacyKey
			,UpdateUser = @UpdateUser
			,UpdateTime = sysdatetimeoffset()
		where
			PersonMailingAddressSID = @PersonMailingAddressSID
			and
			RowStamp = isnull(@RowStamp, RowStamp)

		set @rowsAffected = @@rowcount

		-- check for errors

		if @rowsAffected = 0
		begin
			
			if exists (select 1 from dbo.PersonMailingAddress where PersonMailingAddressSID = @personMailingAddressSID)
			begin
				
				exec sf.pMessage#Get
					 @MessageSCD  = 'UpdateBlocked'
					,@MessageText = @errorText output
					,@DefaultText = N'A change was made to the "%1" record since it was last retrieved. The overwrite was avoided. Refresh the record and try again.'
					,@Arg1        = 'dbo.PersonMailingAddress'
				
				raiserror(@errorText, 16, 1)
			end
			else
			begin
				
				exec sf.pMessage#Get
					 @MessageSCD  = 'RecordNotFound'
					,@MessageText = @errorText output
					,@DefaultText = N'The %1 record was not found. Record ID = "%2". The record may have been deleted or the identifier is invalid.'
					,@Arg1        = 'dbo.PersonMailingAddress'
					,@Arg2        = @personMailingAddressSID
				
				raiserror(@errorText, 18, 1)
			end

		end
		else if @rowsAffected <> 1
		begin

			exec sf.pMessage#Get
				 @MessageSCD  = 'RowCountUnexpected'
				,@MessageText = @errorText output
				,@DefaultText = N'The %1 operation on table "%2" affected an unexpected number of rows (%3). Record ID = %4.'
				,@Arg1        = 'update'
				,@Arg2        = 'dbo.PersonMailingAddress'
				,@Arg3        = @rowsAffected
				,@Arg4        = @personMailingAddressSID
			
			raiserror(@errorText, 18, 1)
		end

		-- apply the table-specific post-update logic (if any)

		--! <PostUpdate>
		--  insert post-update logic here ...
		--! </PostUpdate>
	
		-- call the extended version of the procedure for update.post - if it exists
		
		if exists
		(
			select
				1
			from
				sf.vRoutine r
			where
				r.SchemaName = 'ext'
			and
				r.RoutineName = 'pPersonMailingAddress'
		)
		begin
		
			exec @errorNo = ext.pPersonMailingAddress
				 @Mode                      = 'update.post'
				,@PersonMailingAddressSID   = @PersonMailingAddressSID
				,@PersonSID                 = @PersonSID
				,@StreetAddress1            = @StreetAddress1
				,@StreetAddress2            = @StreetAddress2
				,@StreetAddress3            = @StreetAddress3
				,@CitySID                   = @CitySID
				,@PostalCode                = @PostalCode
				,@RegionSID                 = @RegionSID
				,@EffectiveTime             = @EffectiveTime
				,@IsAdminReviewRequired     = @IsAdminReviewRequired
				,@LastVerifiedTime          = @LastVerifiedTime
				,@ChangeLog                 = @ChangeLog
				,@UserDefinedColumns        = @UserDefinedColumns
				,@PersonMailingAddressXID   = @PersonMailingAddressXID
				,@LegacyKey                 = @LegacyKey
				,@UpdateUser                = @UpdateUser
				,@RowStamp                  = @RowStamp
				,@IsReselected              = @IsReselected
				,@IsNullApplied             = @IsNullApplied
				,@zContext                  = @zContext
				,@CityName                  = @CityName
				,@StateProvinceSID          = @StateProvinceSID
				,@CityIsDefault             = @CityIsDefault
				,@CityIsActive              = @CityIsActive
				,@CityIsAdminReviewRequired = @CityIsAdminReviewRequired
				,@CityRowGUID               = @CityRowGUID
				,@RegionLabel               = @RegionLabel
				,@RegionName                = @RegionName
				,@RegionIsDefault           = @RegionIsDefault
				,@RegionIsActive            = @RegionIsActive
				,@RegionRowGUID             = @RegionRowGUID
				,@GenderSID                 = @GenderSID
				,@NamePrefixSID             = @NamePrefixSID
				,@FirstName                 = @FirstName
				,@CommonName                = @CommonName
				,@MiddleNames               = @MiddleNames
				,@LastName                  = @LastName
				,@BirthDate                 = @BirthDate
				,@DeathDate                 = @DeathDate
				,@HomePhone                 = @HomePhone
				,@MobilePhone               = @MobilePhone
				,@IsTextMessagingEnabled    = @IsTextMessagingEnabled
				,@ImportBatch               = @ImportBatch
				,@PersonRowGUID             = @PersonRowGUID
				,@IsDeleteEnabled           = @IsDeleteEnabled
				,@HtmlAddress               = @HtmlAddress
				,@StateProvinceCode         = @StateProvinceCode
				,@StateProvinceName         = @StateProvinceName
				,@ISOA3                     = @ISOA3
				,@CountryName               = @CountryName
				,@IsCurrentAddress          = @IsCurrentAddress
				,@CountrySID                = @CountrySID
		
		end

		if @trancount = 0 and xact_state() = 1 commit transaction

		-- return all columns for entity (1), just the PK value (2), or no returned value (0)

		if @IsReselected = 2
		begin

			select
				 ent.PersonMailingAddressSID
			from
				dbo.vPersonMailingAddress ent
			where
				ent.PersonMailingAddressSID = @PersonMailingAddressSID

		end
		else if @IsReselected = 1
		begin

			select
				 ent.PersonMailingAddressSID
				,ent.PersonSID
				,ent.StreetAddress1
				,ent.StreetAddress2
				,ent.StreetAddress3
				,ent.CitySID
				,ent.PostalCode
				,ent.RegionSID
				,ent.EffectiveTime
				,ent.IsAdminReviewRequired
				,ent.LastVerifiedTime
				,ent.ChangeLog
				,ent.UserDefinedColumns
				,ent.PersonMailingAddressXID
				,ent.LegacyKey
				,ent.IsDeleted
				,ent.CreateUser
				,ent.CreateTime
				,ent.UpdateUser
				,ent.UpdateTime
				,ent.RowGUID
				,ent.RowStamp
				,ent.CityName
				,ent.StateProvinceSID
				,ent.CityIsDefault
				,ent.CityIsActive
				,ent.CityIsAdminReviewRequired
				,ent.CityRowGUID
				,ent.RegionLabel
				,ent.RegionName
				,ent.RegionIsDefault
				,ent.RegionIsActive
				,ent.RegionRowGUID
				,ent.GenderSID
				,ent.NamePrefixSID
				,ent.FirstName
				,ent.CommonName
				,ent.MiddleNames
				,ent.LastName
				,ent.BirthDate
				,ent.DeathDate
				,ent.HomePhone
				,ent.MobilePhone
				,ent.IsTextMessagingEnabled
				,ent.ImportBatch
				,ent.PersonRowGUID
				,ent.IsDeleteEnabled
				,ent.IsReselected
				,ent.IsNullApplied
				,ent.zContext
				,ent.HtmlAddress
				,ent.StateProvinceCode
				,ent.StateProvinceName
				,ent.ISOA3
				,ent.CountryName
				,ent.IsCurrentAddress
				,ent.CountrySID
			from
				dbo.vPersonMailingAddress ent
			where
				ent.PersonMailingAddressSID = @PersonMailingAddressSID

		end

	end try

	begin catch
		set @xState = xact_state()
		
		if @tranCount > 0 and @xState = 1
		begin
			rollback transaction @sprocName																			-- committable wrapping trx exists: rollback to savepoint
		end
		else if @xState <> 0																									-- full rollback
		begin
			rollback
		end
		
		exec @errorNo = sf.pErrorRethrow																			-- process message text and re-throw the error
	end catch

	return(@errorNo)

end
GO
